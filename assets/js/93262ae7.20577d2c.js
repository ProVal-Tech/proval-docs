"use strict";(self.webpackChunkproval_docs=self.webpackChunkproval_docs||[]).push([[9704],{156:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"powershell/ps-get-hpilohealthreport","title":"Get-HPiLOHealthReport","description":"Documentation for the Get-HPiLOHealthReport command to get a health report from the target HP iLO address.","source":"@site/docs/powershell/Get-HPiLOHealthReport.md","sourceDirName":"powershell","slug":"/powershell/ps-get-hpilohealthreport","permalink":"/proval-docs/docs/powershell/ps-get-hpilohealthreport","draft":false,"unlisted":false,"editUrl":"https://github.com/proval-tech/docs/tree/main/packages/create-docusaurus/templates/shared/docs/powershell/Get-HPiLOHealthReport.md","tags":[{"inline":false,"label":"Networking","permalink":"/proval-docs/docs/tags/networking","description":"Content related to networking."},{"inline":false,"label":"Performance","permalink":"/proval-docs/docs/tags/performance","description":"Content related to measuring or improving system performance."},{"inline":false,"label":"Configuration","permalink":"/proval-docs/docs/tags/configuration","description":"Content related to configuring a device."}],"version":"current","frontMatter":{"id":"ps-get-hpilohealthreport","title":"Get-HPiLOHealthReport","title_meta":"Get-HPiLOHealthReport Command","keywords":["hp","ilo","health","report"],"description":"Documentation for the Get-HPiLOHealthReport command to get a health report from the target HP iLO address.","tags":["networking","performance","configuration"],"draft":false,"unlisted":false},"sidebar":"contentSidebar","previous":{"title":"Get-GroupMembers","permalink":"/proval-docs/docs/powershell/ps-get-groupmembers"},"next":{"title":"Get-LatestInstalledCU","permalink":"/proval-docs/docs/powershell/ps-get-latestinstalledcu"}}');var s=r(4848),o=r(8453);const i={id:"ps-get-hpilohealthreport",title:"Get-HPiLOHealthReport",title_meta:"Get-HPiLOHealthReport Command",keywords:["hp","ilo","health","report"],description:"Documentation for the Get-HPiLOHealthReport command to get a health report from the target HP iLO address.",tags:["networking","performance","configuration"],draft:!1,unlisted:!1},l=void 0,a={},d=[{value:"Description",id:"description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Usage",id:"usage",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Output",id:"output",level:2},{value:"Log Files",id:"log-files",level:3}];function h(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(t.p,{children:"Gets a health report from the target HP iLO address."}),"\n",(0,s.jsx)(t.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"PowerShell v5"}),"\n",(0,s.jsx)(t.li,{children:"Desktop edition of PowerShell"}),"\n",(0,s.jsx)(t.li,{children:"PowerShellGet 2.0+"}),"\n",(0,s.jsx)(t.li,{children:".NET Runtime 4.7.2+"}),"\n",(0,s.jsx)(t.li,{children:"ILO Version 3+"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["If .NET 4.7.2 or higher is not installed, install it.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Will exit due to failure to install."}),"\n",(0,s.jsx)(t.li,{children:"Will exit due to reboot requirement after installation."}),"\n",(0,s.jsx)(t.li,{children:"Will continue if .NET is installed without a necessary reboot."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:"Install and import the HPEiLOCmdlets module."}),"\n",(0,s.jsx)(t.li,{children:"Get all of the network interfaces on the host machine."}),"\n",(0,s.jsxs)(t.li,{children:["Start looping through the network interfaces.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Get the IPv4 addresses assigned to the interface."}),"\n",(0,s.jsxs)(t.li,{children:["Start looping through the IP addresses.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Convert the IP address to binary."}),"\n",(0,s.jsxs)(t.li,{children:["Find the number of host bits based on the prefix length.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["32 bit address - x bits prefix = (32 - x) host bits","\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"192.168.159.0/24\r\n32 - 24 = 8\r\n192.168.159.0 = 11000000101010001001111100000000\r\nPrefix (24 bits) --\x3e 110000001010100010011111\r\nHost (8 bits) --\x3e 00000000\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:"Get the binary representation of the network ID."}),"\n",(0,s.jsx)(t.li,{children:"Get the binary representation of the host ID."}),"\n",(0,s.jsx)(t.li,{children:"Get the total number of possible hosts using string multiplication and binary to decimal conversion."}),"\n",(0,s.jsx)(t.li,{children:"Create an object to store the minimum and maximum values of each octet."}),"\n",(0,s.jsxs)(t.li,{children:["Start a loop starting at 1 and ending at the total number of available hosts.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Get the next possible binary host ID in the loop."}),"\n",(0,s.jsx)(t.li,{children:"Get the full IP address of the host ID that we just gathered."}),"\n",(0,s.jsxs)(t.li,{children:["Start a loop starting at 0 and ending before 4","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Get a substring of the octet from the gathered IP address based on the current loop iteration (x * 8)"}),"\n",(0,s.jsx)(t.li,{children:"Get the decimal representation of the octet binary."}),"\n",(0,s.jsx)(t.li,{children:"Replace the min or max of the octet in the min/max store with this octet if it is applicable."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["Format the min/max ranges to comply with what the HPEiLOCmdlets module requires (ex: ",(0,s.jsx)(t.code,{children:"192.168.22.0-192.168.23.255"})," becomes ",(0,s.jsx)(t.code,{children:"192.168.22-23.0-255"}),")"]}),"\n",(0,s.jsx)(t.li,{children:"If an address was passed into the script, only find the iLO at the target address. Otherwise, use the discovered ranges."}),"\n",(0,s.jsxs)(t.li,{children:["Return the iLO health objects.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Attempt to connect to the iLO.","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"If the connection was successful, set the ConnectionStatus property of the object to 'Connected' and populate the object."}),"\n",(0,s.jsx)(t.li,{children:"If the connection was unsuccessful, set the ConnectionStatus property of the object to the last error message."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Gets the health status of the iLO at IP Address '10.1.1.1'."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-powershell",children:'.\\Get-HPiLOHealthReport.ps1 -Address 10.1.1.1 -Username "ilouser" -Password $securePassword\n'})}),"\n",(0,s.jsx)(t.p,{children:"Gets the health status of all iLOs reachable from the subnets of the host machine's NICs."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-powershell",children:'.\\Get-HPiLOHealthReport.ps1 -Username "ilouser" -Password $securePassword\n'})}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Parameter"}),(0,s.jsx)(t.th,{children:"Required"}),(0,s.jsx)(t.th,{children:"Default"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Address"})}),(0,s.jsx)(t.td,{children:"False"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:"The address of the iLO device to get the health report for."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Username"})}),(0,s.jsx)(t.td,{children:"True"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:"The username used to authenticate with the target iLO(s)."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Password"})}),(0,s.jsx)(t.td,{children:"True"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"SecureString"}),(0,s.jsx)(t.td,{children:"The password used to authenticate with the target iLO(s)."})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"output",children:"Output"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"    System.Management.Automation.PSCustomObject\r\n\r\n    Name                       MemberType   Definition\r\n    ----                       ----------   ----------\r\n    Equals                     Method       bool Equals(System.Object obj)\r\n    GetHashCode                Method       int GetHashCode()\r\n    GetType                    Method       type GetType()\r\n    ToString                   Method       string ToString()\r\n    AgentlessManagementService NoteProperty string AgentlessManagementService=Ready\r\n    BatteryStatus              NoteProperty string BatteryStatus=OK\r\n    BIOSHardwareStatus         NoteProperty string BIOSHardwareStatus=OK\r\n    ConnectionStatus           NoteProperty string ConnectionStatus=Connected\r\n    FanRedundancy              NoteProperty string FanRedundancy=Redundant\r\n    FanStatus                  NoteProperty string FanStatus=OK\r\n    Hostname                   NoteProperty string Hostname=\r\n    HostSystemInformation      NoteProperty HSI HostSystemInformation=HPE.iLO.Response.HSI\r\n    IP                         NoteProperty string IP=10.1.1.1\r\n    ManagementProcessor        NoteProperty MP ManagementProcessor=HPE.iLO.Response.MP\r\n    MemoryStatus               NoteProperty string MemoryStatus=OK\r\n    NetworkStatus              NoteProperty string NetworkStatus=OK\r\n    PowerSuppliesMismatch      NoteProperty string PowerSuppliesMismatch=No\r\n    PowerSuppliesRedundancy    NoteProperty string PowerSuppliesRedundancy=Redundant\r\n    PowerSuppliesStatus        NoteProperty string PowerSuppliesStatus=OK\r\n    ProcessorStatus            NoteProperty string ProcessorStatus=OK\r\n    Status                     NoteProperty StatusType Status=OK\r\n    StatusInfo                 NoteProperty object StatusInfo=null\r\n    StorageStatus              NoteProperty string StorageStatus=Warning\r\n    TemperatureStatus          NoteProperty string TemperatureStatus=OK\r\n\r\n    HPE.iLO.Response.HSI\r\n\r\n    Name         MemberType Definition\r\n    ----         ---------- ----------\r\n    Equals       Method     bool Equals(System.Object obj)\r\n    GetHashCode  Method     int GetHashCode()\r\n    GetType      Method     type GetType()\r\n    ToString     Method     string ToString()\r\n    cUUID        Property   string cUUID {get;set;}\r\n    NICS         Property   HPE.iLO.Response.HSI_NIC[] NICS {get;set;}\r\n    ProductID    Property   string ProductID {get;set;}\r\n    SerialNumber Property   string SerialNumber {get;set;}\r\n    SP           Property   string SP {get;set;}\r\n    SPN          Property   string SPN {get;set;}\r\n    UUID         Property   string UUID {get;set;}\r\n    Virtual      Property   HPE.iLO.Response.HSI_Virtual Virtual {get;set;}\r\n\r\n    HPE.iLO.Response.MP\r\n\r\n    Name        MemberType Definition\r\n    ----        ---------- ----------\r\n    Equals      Method     bool Equals(System.Object obj)\r\n    GetHashCode Method     int GetHashCode()\r\n    GetType     Method     type GetType()\r\n    ToString    Method     string ToString()\r\n    BBLK        Property   string BBLK {get;set;}\r\n    EALERT      Property   string EALERT {get;set;}\r\n    ERS         Property   string ERS {get;set;}\r\n    FWRI        Property   double FWRI {get;set;}\r\n    HWRI        Property   string HWRI {get;set;}\r\n    IPM         Property   string IPM {get;set;}\r\n    PN          Property   string PN {get;set;}\r\n    PWRM        Property   string PWRM {get;set;}\r\n    SN          Property   string SN {get;set;}\r\n    SSO         Property   string SSO {get;set;}\r\n    ST          Property   string ST {get;set;}\r\n    UUID        Property   string UUID {get;set;}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"log-files",children:"Log Files"}),"\n",(0,s.jsx)(t.p,{children:".\\Get-HPiLOHealthReport-log.txt\r\n.\\Get-HPiLOHealthReport-error.txt"})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>l});var n=r(6540);const s={},o=n.createContext(s);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);