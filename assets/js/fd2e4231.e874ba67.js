"use strict";(self.webpackChunkproval_docs=self.webpackChunkproval_docs||[]).push([[9268],{8657:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"powershell/ps-set-powerplan","title":"Set-PowerPlan","description":"Documentation for the Set-PowerPlan command to configure power plan settings using a provided hashtable or CSV file.","source":"@site/docs/powershell/Set-PowerPlan.md","sourceDirName":"powershell","slug":"/powershell/ps-set-powerplan","permalink":"/proval-docs/docs/powershell/ps-set-powerplan","draft":false,"unlisted":false,"editUrl":"https://github.com/proval-tech/docs/tree/main/packages/create-docusaurus/templates/shared/docs/powershell/Set-PowerPlan.md","tags":[{"inline":false,"label":"Configuration","permalink":"/proval-docs/docs/tags/configuration","description":"Content related to configuring a device."},{"inline":false,"label":"Windows","permalink":"/proval-docs/docs/tags/windows","description":"Content related to the Windows operating system."},{"inline":false,"label":"Performance","permalink":"/proval-docs/docs/tags/performance","description":"Content related to measuring or improving system performance."}],"version":"current","frontMatter":{"id":"ps-set-powerplan","title":"Set-PowerPlan","title_meta":"Set-PowerPlan Command","keywords":["powerplan","settings","configuration","energy"],"description":"Documentation for the Set-PowerPlan command to configure power plan settings using a provided hashtable or CSV file.","tags":["configuration","windows","performance"],"draft":false,"unlisted":false},"sidebar":"contentSidebar","previous":{"title":"Set-PathVariable","permalink":"/proval-docs/docs/powershell/ps-set-pathvariable"},"next":{"title":"Set-ServiceLogin","permalink":"/proval-docs/docs/powershell/ps-set-servicelogin"}}');var s=t(4848),i=t(8453);const o={id:"ps-set-powerplan",title:"Set-PowerPlan",title_meta:"Set-PowerPlan Command",keywords:["powerplan","settings","configuration","energy"],description:"Documentation for the Set-PowerPlan command to configure power plan settings using a provided hashtable or CSV file.",tags:["configuration","windows","performance"],draft:!1,unlisted:!1},a=void 0,l={},d=[{value:"Description",id:"description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Usage",id:"usage",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Output",id:"output",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"Configures power plan settings using either a provided hashtable or CSV file. If the specified power plan does not exist, it will be created."}),"\n",(0,s.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"PowePlanSettingsTemplate.csv"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ensures mandatory parameters are provided and validates the parameter's format and structure."}),"\n",(0,s.jsxs)(n.li,{children:["Retrieves available power plans using ",(0,s.jsx)(n.code,{children:"powercfg /list"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Check if the specified power plan (",(0,s.jsx)(n.code,{children:"$Name"}),") exists."]}),"\n",(0,s.jsx)(n.li,{children:"If not, duplicates the active plan and renames it to the specified name."}),"\n",(0,s.jsx)(n.li,{children:"Retrieves current settings of the power plan."}),"\n",(0,s.jsxs)(n.li,{children:["If a download URL is provided for ",(0,s.jsx)(n.code,{children:"$CSVPath"}),", downloads and converts the CSV file to a PowerShell object."]}),"\n",(0,s.jsxs)(n.li,{children:["If a local computer path is provided for ",(0,s.jsx)(n.code,{children:"$CSVPath"}),", converts the contents of the CSV file to a PowerShell object."]}),"\n",(0,s.jsxs)(n.li,{children:["If using a hashtable (",(0,s.jsx)(n.code,{children:"$Setting"}),"), create an array of settings based on the hashtable structure."]}),"\n",(0,s.jsx)(n.li,{children:"Iterates through each setting in the configuration."}),"\n",(0,s.jsx)(n.li,{children:"Retrieves GUIDs for the subgroup and power setting from the current power plan settings."}),"\n",(0,s.jsxs)(n.li,{children:["Uses ",(0,s.jsx)(n.code,{children:"powercfg"})," commands to set AC and DC values for the specified subgroup and power setting."]}),"\n",(0,s.jsx)(n.li,{children:"Log success or error messages for each configuration attempt."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Configures a custom power plan named 'CustomPlan' with specified AC and DC power settings."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:".\\PS C:\\> .\\Set-PowerPlanSettings.ps1 -Name 'CustomPlan'-Setting @{Subgroup=@{'Sleep' = @{ PowerSetting = @{ 'Sleep after' = @{ AC = 60; DC = 60 }; 'Allow hybrid sleep' = @{ AC = 1; DC = 100}; 'Hibernate After' = @{ AC = 0; DC = 18000}; 'Allow Wake Timers' = @{ AC = 2; DC = 2 }}}}}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Configures a custom power plan named 'CustomPlan' with specified AC and DC power settings from the ",(0,s.jsx)(n.code,{children:"$Settings"})," hashtable."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:".\\PS C:\\> $setting = @{\r\n            Subgroup = @{\r\n                'Hard Disk' = @{\r\n                    PowerSetting = @{\r\n                        'Turn off hard disk after' = @{\r\n                            AC = 0\r\n                            DC = 0\r\n                        }\r\n                    }\r\n                }\r\n                'Internet Explorer' = @{\r\n                    PowerSetting = @{\r\n                        'JavaScript Timer Frequency' = @{\r\n                            AC = 1\r\n                            DC = 0\r\n                        }\r\n                    }\r\n                }\r\n                'Sleep' = @{\r\n                    PowerSetting = @{\r\n                        'Sleep after' = @{\r\n                            AC = 60\r\n                            DC = 60\r\n                        }\r\n                        'Allow hybrid sleep' = @{\r\n                            AC = 1\r\n                            DC = 100\r\n                        }\r\n                        'Hibernate After' = @{\r\n                            AC = 0\r\n                            DC = 18000\r\n                        }\r\n                        'Allow Wake Timers' = @{\r\n                            AC = 2\r\n                            DC = 2\r\n                        }\r\n                    }\r\n                }\r\n                'Intel(R) Graphics Settings' = @{\r\n                    PowerSetting = @{\r\n                        'Intel(R) Graphics Power Plan' = @{\r\n                            AC = 2\r\n                            DC = 2\r\n                        }\r\n                    }\r\n                }\r\n                'AMD Power Slider' = @{\r\n                    PowerSetting = @{\r\n                        Overlay = @{\r\n                            DC = 2\r\n                            AC = 2\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }   \r\n.\\PS C:\\> .\\Set-PowerPlanSettings.ps1 -Name 'CustomPlan'-Setting $Settings\n"})}),"\n",(0,s.jsx)(n.p,{children:"Configures a custom power plan named 'CustomPlan' with specified AC and DC power settings from the 'CustomPlanTemplate.csv' file located in the 'C:\\Temp' directory."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"PS C:\\> .\\Set-PowerPlanSettings.ps1 -Name 'CustomPlan'-CSVPath 'C:\\temp\\CustomPlanTemplate.csv'\n"})}),"\n",(0,s.jsx)(n.p,{children:"Configures a custom power plan named 'CustomPlan' with specified AC and DC power settings from the 'CustomPlanTemplate.csv' downloaded from 'https:\\file.provaltech.com\\CustomPlanTemplate.csv'."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"PS C:\\> .\\Set-PowerPlanSettings.ps1 -Name 'CustomPlan'-CSVPath 'https:\\\\file.provaltech.com\\CustomPlanTemplate.csv'\n"})}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Alias"}),(0,s.jsx)(n.th,{children:"Required"}),(0,s.jsx)(n.th,{children:"ParameterSetName"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Name"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"True"}),(0,s.jsx)(n.td,{children:"hashtable, csv"}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"Specifies the name of the power plan to configure."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"CSVPath"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"True"}),(0,s.jsx)(n.td,{children:"hashtable"}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"Specifies a hashtable containing the configuration for the power plan."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Setting"})}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"True"}),(0,s.jsx)(n.td,{children:"hashtable"}),(0,s.jsx)(n.td,{children:"HashTable"}),(0,s.jsx)(n.td,{children:"Specifies the path to a CSV file containing the power plan configuration, which can be either a local file on the computer or a download URL."})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"output",children:"Output"}),"\n",(0,s.jsx)(n.p,{children:".\\Set-PowerPlan-log.txt\r\n.\\Set-PowerPlan-Error.txt"})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);