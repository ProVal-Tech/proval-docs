"use strict";(self.webpackChunkproval_docs=self.webpackChunkproval_docs||[]).push([[3858],{6923:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"powershell/ps-get-newdomainadmin","title":"Get-NewDomainAdmin","description":"Documentation for the Get-NewDomainAdmin command to get domain users that have been granted elevated permissions since the last run of the script.","source":"@site/docs/powershell/Get-NewDomainAdmin.md","sourceDirName":"powershell","slug":"/powershell/ps-get-newdomainadmin","permalink":"/proval-docs/docs/powershell/ps-get-newdomainadmin","draft":false,"unlisted":false,"editUrl":"https://github.com/proval-tech/docs/tree/main/packages/create-docusaurus/templates/shared/docs/powershell/Get-NewDomainAdmin.md","tags":[{"inline":false,"label":"Active Directory","permalink":"/proval-docs/docs/tags/active-directory","description":"Content related to Active Directory."},{"inline":false,"label":"Security","permalink":"/proval-docs/docs/tags/security","description":"Content related to security."},{"inline":false,"label":"Configuration","permalink":"/proval-docs/docs/tags/configuration","description":"Content related to configuring a device."}],"version":"current","frontMatter":{"id":"ps-get-newdomainadmin","title":"Get-NewDomainAdmin","title_meta":"Get-NewDomainAdmin Command","keywords":["new","domain","admin","permissions"],"description":"Documentation for the Get-NewDomainAdmin command to get domain users that have been granted elevated permissions since the last run of the script.","tags":["active-directory","security","configuration"],"draft":false,"unlisted":false},"sidebar":"contentSidebar","previous":{"title":"Get-LatestInstalledCU","permalink":"/proval-docs/docs/powershell/ps-get-latestinstalledcu"},"next":{"title":"Get-NewLocalAdmin","permalink":"/proval-docs/docs/powershell/ps-get-newlocaladmin"}}');var s=n(4848),o=n(8453);const a={id:"ps-get-newdomainadmin",title:"Get-NewDomainAdmin",title_meta:"Get-NewDomainAdmin Command",keywords:["new","domain","admin","permissions"],description:"Documentation for the Get-NewDomainAdmin command to get domain users that have been granted elevated permissions since the last run of the script.",tags:["active-directory","security","configuration"],draft:!1,unlisted:!1},r=void 0,l={},d=[{value:"Description",id:"description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Output",id:"output",level:2},{value:"Log Files",id:"log-files",level:2},{value:"Tables",id:"tables",level:2}];function c(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(t.p,{children:"Gets domain users that have been granted elevated permissions since the last run of the script."}),"\n",(0,s.jsx)(t.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Run as administrator"}),"\n",(0,s.jsx)(t.li,{children:"PowerShell v5"}),"\n",(0,s.jsx)(t.li,{children:"Domain Controller"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"If the script has not been run previously, then the admin data is saved to the table and the script exits. If a new domain admin is detected from a previous run, then it returns the newly elevated users (if any)."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-powershell",children:".\\Get-NewDomainAdmin.ps1\n"})}),"\n",(0,s.jsx)(t.h2,{id:"output",children:"Output"}),"\n",(0,s.jsx)(t.h2,{id:"log-files",children:"Log Files"}),"\n",(0,s.jsx)(t.p,{children:".\\Get-NewDomainAdmin-log.txt"}),"\n",(0,s.jsx)(t.h2,{id:"tables",children:"Tables"}),"\n",(0,s.jsx)(t.p,{children:"Get-NewDomainAdmin_log\r\nGet-NewDomainAdmin_admins"})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var i=n(6540);const s={},o=i.createContext(s);function a(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);