"use strict";(self.webpackChunkproval_docs=self.webpackChunkproval_docs||[]).push([[2671],{2634:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"powershell/ps-get-diskinfo","title":"Get-DiskInfo","description":"Documentation for the Get-DiskInfo command to return detailed information about all individual drives, including performance and logical drive levels.","source":"@site/docs/powershell/Get-DiskInfo.md","sourceDirName":"powershell","slug":"/powershell/ps-get-diskinfo","permalink":"/docs/powershell/ps-get-diskinfo","draft":false,"unlisted":false,"editUrl":"https://github.com/proval-tech/docs/tree/main/packages/create-docusaurus/templates/shared/docs/powershell/Get-DiskInfo.md","tags":[{"inline":false,"label":"Performance","permalink":"/docs/tags/performance","description":"Content related to measuring or improving system performance."},{"inline":false,"label":"Windows","permalink":"/docs/tags/windows","description":"Content related to the Windows operating system."},{"inline":false,"label":"Configuration","permalink":"/docs/tags/configuration","description":"Content related to configuring a device."}],"version":"current","frontMatter":{"id":"ps-get-diskinfo","title":"Get-DiskInfo","title_meta":"Get-DiskInfo Command","keywords":["disk","info","performance","health"],"description":"Documentation for the Get-DiskInfo command to return detailed information about all individual drives, including performance and logical drive levels.","tags":["performance","windows","configuration"],"draft":false,"unlisted":false},"sidebar":"contentSidebar","previous":{"title":"Get-DesynchronizedSqlReplicas","permalink":"/docs/powershell/ps-get-desynchronizedsqlreplicas"},"next":{"title":"Get-FirefoxExtensions","permalink":"/docs/powershell/ps-get-firefoxextensions"}}');var i=t(4848),a=t(8453);const s={id:"ps-get-diskinfo",title:"Get-DiskInfo",title_meta:"Get-DiskInfo Command",keywords:["disk","info","performance","health"],description:"Documentation for the Get-DiskInfo command to return detailed information about all individual drives, including performance and logical drive levels.",tags:["performance","windows","configuration"],draft:!1,unlisted:!1},o=void 0,l={},d=[{value:"Description",id:"description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Usage",id:"usage",level:2},{value:"Use Case",id:"use-case",level:2},{value:"Output",id:"output",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"Get-CriticalDiskInfo was not working reliably due to a non-standard in SMART reporting on hard drives.  We needed to find a way to alert on bad hard drives that doesn't rely on Crystal Disk Info.\r\nGet-DiskInfo will return all individual drive information down to the performance and even logical drive levels."}),"\n",(0,i.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsx)(n.p,{children:"PowerShell V.5"}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Creates the returned object"}),"\n",(0,i.jsx)(n.li,{children:"Grabs partition and disk information"}),"\n",(0,i.jsxs)(n.li,{children:["Cycles through each partition","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Gets all associated logical drives and cycles throught them for that partition."}),"\n",(0,i.jsx)(n.li,{children:"Creates the partition logical drive and raw performance objects for that partition."}),"\n",(0,i.jsx)(n.li,{children:"Creates the partition object."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Cycles throught the drives.","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Creates the drive object"}),"\n",(0,i.jsx)(n.li,{children:"Adds the appropriate partition object to the drive object."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Returns all found items."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:".\\Get-DiskInfo.ps1\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns all Data for all disks, their partitions, and any logical disks assigned to those partitions on the computer."}),"\n",(0,i.jsx)(n.h2,{id:"use-case",children:"Use Case"}),"\n",(0,i.jsx)(n.p,{children:"Eg. Failing hard drive Test example\r\nRun this script twice.\r\nRawPerformanceData.AvgDiskQueueLength(2nd run) - RawPerformanceData.AvgDiskQueueLength(2nd run) / RawPerformanceData.Timestamp_Sys100NS(2nd time) - RawPerformanceData.Timestamp_Sys100NS(1st Time)\r\n#Under 2 ideally, if 2 or more for prolonged time bottleneck is found.\r\nRawPerformanceData.PercentIdleTime (same formula)\r\n#higher the better\r\nRawPerformanceData.AvgDisksecPerRead (same formula)\r\nIf you can get a baseline for this you can compare it over time.\r\nRawPerformanceData.AvgDisksecPerWrite (same formula)\r\nSame as above\r\nRawPerformanceData.DiskReadsPersec (same formula)\r\nRather high values usually mean that there are queries, new or old, that are missing indexes and are reading more data than required.\r\nRawPerformanceData.DiskWritesPersec (same formula)\r\nRather high values usually mean that there are queries, new or old, that are missing indexes and are reading more data than required.\r\nRawPerformanceData.AvgDiskReadQueueLength (same formula)"}),"\n",(0,i.jsx)(n.p,{children:"Example Output:"}),"\n",(0,i.jsx)(n.p,{children:"Total disk latency: 42 ms (0.042 seconds is equal to 42 milliseconds)\r\nIdle Time: 87.5204598922\r\nRead latency: 5 ms\r\nWrite latency: 80 ms\r\nCurrent disk queue: 48\r\nWrite queue: 45\r\nRead queue: 2.7"}),"\n",(0,i.jsx)(n.p,{children:"Interpretation:\r\nThese results show that the disk is clearly a bottleneck and underperforming for the workload.  Both the write latency and write queue are very high.\r\nIf this were a real environment, we would be digging deeper into the storage to see where the issue is.\r\nIt could be that there's a problem on the storage side (like a bad drive or a misconfiguration), or that the storage is simply too slow to handle the workload.\r\nGenerally speaking, the performance tests can be interpreted with the following:"}),"\n",(0,i.jsx)(n.p,{children:"Disk latency should be below 15 ms.  Disk latency above 25 ms can cause noticeable performance issues.\r\nLatency above 50 ms is indicative of extremely underperforming storage.\r\nDisk queues should be no greater twice than the number of physical disks serving the drive.\r\nFor example, if the underlying storage is a 6 disk RAID 5 array, the total disk queue should be 12 or less.\r\nFor storage that isn't mapped directly to an array (such as in a private cloud or in Azure), queues should be below 10 or so.\r\nQueue length isn't directly indicative of performance issues but can help lead to that conclusion.\r\nThese are general rules and may not apply in every scenario, however, if you see the counters exceeding the thresholds above, it warrants a deeper investigation."}),"\n",(0,i.jsx)(n.h2,{id:"output",children:"Output"}),"\n",(0,i.jsx)(n.p,{children:"Location of output for log, result, and error files."}),"\n",(0,i.jsx)(n.p,{children:"[system.object]"})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);