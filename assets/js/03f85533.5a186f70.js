"use strict";(self.webpackChunkproval_docs=self.webpackChunkproval_docs||[]).push([[23858],{105058:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"powershell/ps-get-newdomainadmin","title":"Get-NewDomainAdmin","description":"Documentation for the Get-NewDomainAdmin command to get domain users that have been granted elevated permissions since the last run of the script.","source":"@site/docs/powershell/Get-NewDomainAdmin.md","sourceDirName":"powershell","slug":"/powershell/ps-get-newdomainadmin","permalink":"/proval-docs/docs/powershell/ps-get-newdomainadmin","draft":false,"unlisted":false,"editUrl":"https://github.com/proval-tech/proval-docs/tree/main/docs/powershell/Get-NewDomainAdmin.md","tags":[{"inline":false,"label":"Active Directory","permalink":"/proval-docs/docs/tags/active-directory","description":"Documents related to Active Directory services and management"},{"inline":false,"label":"Security","permalink":"/proval-docs/docs/tags/security","description":"Documents discussing security measures and practices for IT systems"}],"version":"current","frontMatter":{"id":"ps-get-newdomainadmin","title":"Get-NewDomainAdmin","title_meta":"Get-NewDomainAdmin","keywords":["new","domain","admin","permissions"],"description":"Documentation for the Get-NewDomainAdmin command to get domain users that have been granted elevated permissions since the last run of the script.","tags":["active-directory","security"],"draft":false,"unlisted":false},"sidebar":"contentSidebar","previous":{"title":"Get-LatestInstalledCU","permalink":"/proval-docs/docs/powershell/ps-get-latestinstalledcu"},"next":{"title":"Get-NewLocalAdmin","permalink":"/proval-docs/docs/powershell/ps-get-newlocaladmin"}}');var s=t(474848),o=t(28453);const r={id:"ps-get-newdomainadmin",title:"Get-NewDomainAdmin",title_meta:"Get-NewDomainAdmin",keywords:["new","domain","admin","permissions"],description:"Documentation for the Get-NewDomainAdmin command to get domain users that have been granted elevated permissions since the last run of the script.",tags:["active-directory","security"],draft:!1,unlisted:!1},a=void 0,l={},d=[{value:"Description",id:"description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Output",id:"output",level:2},{value:"Log Files",id:"log-files",level:2},{value:"Tables",id:"tables",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Get-NewDomainAdmin"})," command retrieves domain users who have been granted elevated permissions since the last execution of the script."]}),"\n",(0,s.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Run as administrator"}),"\n",(0,s.jsx)(n.li,{children:"PowerShell v5"}),"\n",(0,s.jsx)(n.li,{children:"Domain Controller"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"If the script has not been run previously, the admin data is saved to the table, and the script exits. If a new domain admin is detected from a previous run, the script returns the newly elevated users (if any)."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:".\\Get-NewDomainAdmin.ps1\n"})}),"\n",(0,s.jsx)(n.h2,{id:"output",children:"Output"}),"\n",(0,s.jsx)(n.h2,{id:"log-files",children:"Log Files"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:".\\Get-NewDomainAdmin-log.txt"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"tables",children:"Tables"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Get-NewDomainAdmin_log"}),"\n",(0,s.jsx)(n.li,{children:"Get-NewDomainAdmin_admins"}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(296540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);