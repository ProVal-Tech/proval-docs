"use strict";(self.webpackChunkproval_docs=self.webpackChunkproval_docs||[]).push([[73808],{728790:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"cwa/monitors/import-remote-monitor-bsod-monitoring","title":"import-remote-monitor-bsod-monitoring","description":"1 - Import alert template","source":"@site/docs/cwa/monitors/import-remote-monitor-bsod-monitoring.md","sourceDirName":"cwa/monitors","slug":"/cwa/monitors/import-remote-monitor-bsod-monitoring","permalink":"/docs/cwa/monitors/import-remote-monitor-bsod-monitoring","draft":false,"unlisted":false,"editUrl":"https://github.com/proval-tech/proval-docs/tree/main/docs/cwa/monitors/import-remote-monitor-bsod-monitoring.md","tags":[],"version":"current","frontMatter":{},"sidebar":"contentSidebar","previous":{"title":"BSOD Monitoring","permalink":"/docs/cwa/monitors/31b19c20-52f0-491d-a2d0-7827cf8723a0"},"next":{"title":"Active Directory Reporting SQL Import Attachment","permalink":"/docs/cwa/reports/fff1e6ee-cc28-43da-87ef-cdb121414c76"}}');var n=r(474848),o=r(28453);const i={},s=void 0,d={},c=[{value:"1 - Import alert template",id:"1---import-alert-template",level:4},{value:"2 - Reload the system cache",id:"2---reload-the-system-cache",level:4},{value:"3 - Copy the following query and replace &#39;YOUR COMMA SEPARATED LIST OF GROUPID(S)&#39; with the Groupid(s) of the relevant groups: (The string to replace can be found at the very bottom of the query, right after <code>WHERE</code>)",id:"3---copy-the-following-query-and-replace-your-comma-separated-list-of-groupids-with-the-groupids-of-the-relevant-groups-the-string-to-replace-can-be-found-at-the-very-bottom-of-the-query-right-after-where",level:4},{value:"4 - An example of a query with a groupid:",id:"4---an-example-of-a-query-with-a-groupid",level:4},{value:"5 - Now execute your query from an RAWSQL monitor set.",id:"5---now-execute-your-query-from-an-rawsql-monitor-set",level:4},{value:"6 - Locate your remote monitor by opening the group(s) remote monitors tab.",id:"6---locate-your-remote-monitor-by-opening-the-groups-remote-monitors-tab",level:4}];function l(e){const t={code:"code",h4:"h4",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h4,{id:"1---import-alert-template",children:"1 - Import alert template"}),"\n",(0,n.jsx)(t.p,{children:"\u25b3 Custom - Ticket Creation - Computer"}),"\n",(0,n.jsx)(t.h4,{id:"2---reload-the-system-cache",children:"2 - Reload the system cache"}),"\n",(0,n.jsxs)(t.h4,{id:"3---copy-the-following-query-and-replace-your-comma-separated-list-of-groupids-with-the-groupids-of-the-relevant-groups-the-string-to-replace-can-be-found-at-the-very-bottom-of-the-query-right-after-where",children:["3 - Copy the following query and replace 'YOUR COMMA SEPARATED LIST OF GROUPID(S)' with the Groupid(s) of the relevant groups: (The string to replace can be found at the very bottom of the query, right after ",(0,n.jsx)(t.code,{children:"WHERE"}),")"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"#Insert EDFs\r\nINSERT IGNORE INTO `extrafield` (`Form`, `Name`, `Sort`, `NoBreak`, `FType`, `Section`, `UnEditable`, `Collapsed`, `Fill`, `LtGuid`, `IsPassword`, `IsEncrypted`, `IsHidden`, `IsRestricted`, `ViewPermissions`, `EditPermissions`) VALUES \r\n(3, 'BSOD Monitoring', 0, 0, 1, 'Monitoring', 0, 0, 'This custom field includes the agent of the client for the BSOD monitoring', '96e96edb-cce4-4a6f-9bf8-398af9bb6b20', 0, 0, 0, 0, '', ''),\r\n(2, 'BSOD Monitoring Exclude', 0, 0, 1, 'Exclusions', 0, 0, 'This checkbox gives feature to exclude the agents of locations from the BSOD monitoring', 'd3a08af9-dbda-488b-b2c6-d0978d931295', 0, 0, 0, 0, '', ''),\r\n(1, 'BSOD Monitoring Exclude', 0, 0, 1, 'Exclusions', 0, 0, 'This excludes the agent from the BSOD Monitoring', 'a3fd846f-60f6-49f9-926d-0b1baf959358', 0, 0, 0, 0, '', '');\r\n\r\n#Refresh EDFs\r\nCall v_extradata(1,'computers');\r\nCall v_extradatarefresh(1,'computers');\r\nCall v_extradata(2,'locations');\r\nCall v_extradatarefresh(2,'locations');\r\nCall v_extradata(3,'clients');\r\nCall v_extradatarefresh(3,'clients');\r\n\r\n\r\n#Insert Search\r\nINSERT INTO `sensorchecks` \r\nSELECT \r\n'' as `SensID`,\r\n'BSOD Monitoring'  as `Name`, \r\n'SELECT \\r\\n   computers.computerid as `Computer Id`,\\r\\n   computers.name as `Computer Name`,\\r\\n   clients.name as `Client Name`,\\r\\n   computers.domain as `Computer Domain`,\\r\\n   computers.username as `Computer User`,\\r\\n   IFNULL(IFNULL(edfAssigned1.Value,edfDefault1.value),\\'0\\') as `Computer - Client - Extra Data Field - Custom Automation - BSOD Monitoring`,\\r\\n   IFNULL(IFNULL(edfAssigned2.Value,edfDefault2.value),\\'0\\') as `Computer - Location - Extra Data Field - Exclusions - BSOD Monitoring Exclude`,\\r\\n   IFNULL(IFNULL(edfAssigned3.Value,edfDefault3.value),\\'0\\') as `Computer - Extra Data Field - Exclusions - BSOD Monitoring Exclude`,\\r\\n   IF(INSTR(IFNULL(inv_operatingsystem.Name, Computers.OS), \\'windows\\')>0, 1, IF(INSTR(IFNULL(inv_operatingsystem.Name, Computers.OS), \\'darwin\\') >0, 2, 3)) as `Computer.OS.Type`\\r\\nFROM Computers \\r\\nLEFT JOIN inv_operatingsystem ON (Computers.ComputerId=inv_operatingsystem.ComputerId)\\r\\nLEFT JOIN Clients ON (Computers.ClientId=Clients.ClientId)\\r\\nLEFT JOIN Locations ON (Computers.LocationId=Locations.LocationID)\\r\\nLEFT JOIN ExtraFieldData edfAssigned1 ON (edfAssigned1.id=Clients.ClientId and edfAssigned1.ExtraFieldId =(Select ExtraField.id FROM ExtraField WHERE LTGuid=\\'96e96edb-cce4-4a6f-9bf8-398af9bb6b20\\'))\\r\\nLEFT JOIN ExtraFieldData edfDefault1 ON (edfDefault1.id=0 and edfDefault1.ExtraFieldId =(Select ExtraField.id FROM ExtraField WHERE LTGuid=\\'96e96edb-cce4-4a6f-9bf8-398af9bb6b20\\'))\\r\\nLEFT JOIN ExtraFieldData edfAssigned2 ON (edfAssigned2.id=Locations.LocationId and edfAssigned2.ExtraFieldId =(Select ExtraField.id FROM ExtraField WHERE LTGuid=\\'d3a08af9-dbda-488b-b2c6-d0978d931295\\'))\\r\\nLEFT JOIN ExtraFieldData edfDefault2 ON (edfDefault2.id=0 and edfDefault2.ExtraFieldId =(Select ExtraField.id FROM ExtraField WHERE LTGuid=\\'d3a08af9-dbda-488b-b2c6-d0978d931295\\'))\\r\\nLEFT JOIN ExtraFieldData edfAssigned3 ON (edfAssigned3.id=Computers.ComputerId and edfAssigned3.ExtraFieldId =(Select ExtraField.id FROM ExtraField WHERE LTGuid=\\'a3fd846f-60f6-49f9-926d-0b1baf959358\\'))\\r\\nLEFT JOIN ExtraFieldData edfDefault3 ON (edfDefault3.id=0 and edfDefault3.ExtraFieldId =(Select ExtraField.id FROM ExtraField WHERE LTGuid=\\'a3fd846f-60f6-49f9-926d-0b1baf959358\\'))\\r\\n WHERE \\r\\n((((IFNULL(IFNULL(edfAssigned1.Value,edfDefault1.value),\\'0\\')<>0) AND (IFNULL(IFNULL(edfAssigned2.Value,edfDefault2.value),\\'0\\')=0) AND (IFNULL(IFNULL(edfAssigned3.Value,edfDefault3.value),\\'0\\')=0) AND (IF(INSTR(IFNULL(inv_operatingsystem.Name, Computers.OS), \\'windows\\')>0, 1, IF(INSTR(IFNULL(inv_operatingsystem.Name, Computers.OS), \\'darwin\\') >0, 2, 3)) = \\'1\\'))))\\r\\n' as `SQL`,\r\n'4' as `QueryType`,\r\n'Select||=||=||=|^Select|||||||^' as `ListData`,\r\n'0' as `FolderID`,\r\n'7a3ec0ad-d589-4efc-ad4a-ede213f4d477' as `GUID`,\r\n'<LabTechAbstractSearch><asn><st>AndNode</st><cn><asn><st>AndNode</st><cn><asn><st>ComparisonNode</st><lon>Computer.Client.Extra Data Field.Custom Automation.BSOD Monitoring</lon><lok>Computer.Client.Edf.96e96edb-cce4-4a6f-9bf8-398af9bb6b20</lok><lmo>IsTrue</lmo><dv>NULL</dv><dk>NULL</dk></asn><asn><st>ComparisonNode</st><lon>Computer.Location.Extra Data Field.Exclusions.BSOD Monitoring Exclude</lon><lok>Computer.Location.Edf.d3a08af9-dbda-488b-b2c6-d0978d931295</lok><lmo>IsFalse</lmo><dv>NULL</dv><dk>NULL</dk></asn><asn><st>ComparisonNode</st><lon>Computer.Extra Data Field.Exclusions.BSOD Monitoring Exclude</lon><lok>Computer.Edf.a3fd846f-60f6-49f9-926d-0b1baf959358</lok><lmo>IsFalse</lmo><dv>NULL</dv><dk>NULL</dk></asn><asn><st>ComparisonNode</st><lon>Computer.OS.Type</lon><lok>Computer.OS.Type</lok><lmo>Equals</lmo><dv>Windows</dv><dk>1</dk></asn></cn></asn></cn></asn></LabTechAbstractSearch>' as `SearchXML`,\r\n(NULL) as `UpdatedBy`,\r\n(NULL) as `UpdateDate`\r\nFROM  (SELECT MIN(computerid) FROM computers) a\r\nWhere (SELECT count(*) From SensorChecks where `GUID` = '7a3ec0ad-d589-4efc-ad4a-ede213f4d477') = 0 ;\r\n\r\n\r\n#INSERT REMOTE monitor\r\nSET @SearchID = (SELECT sensid FROM sensorchecks WHERE GUID = '7a3ec0ad-d589-4efc-ad4a-ede213f4d477');\r\nSET @Alertaction = (SELECT alertactionid FROM alerttemplate WHERE `GUID` = 'ee4bc754-faf7-4667-8bba-8d3923c22c3e');\r\nINSERT INTO groupagents \r\nSELECT '' as `AgentID`,\r\n`groupid` as `GroupID`,\r\n@SearchID as `SearchID`,\r\n'ProVal Production - Unhealthy - BSOD Detected' as `Name`,\r\n'6' as `CheckAction`,\r\n@AlertAction as `AlertAction`,\r\n'Unhealthy - BSOD detected on %clientname%\\\\%computername%~~~Unhealthy - BSOD status %STATUS% on %CLIENTNAME%\\\\%COMPUTERNAME% at %LOCATIONNAME% result %RESULT%. Refer to the csv file at path  \"C:\\\\ProgramData\\\\_automation\\\\script\\\\BlueScreen\\\\Export.csv\" for more details.!!!Unhealthy - BSOD detected on %clientname%\\\\%computername%~~~Unhealthy - BSOD status %STATUS% on %CLIENTNAME%\\\\%COMPUTERNAME% at %LOCATIONNAME% result %RESULT%. Refer to the csv file at path  \"C:\\\\ProgramData\\\\_automation\\\\script\\\\BlueScreen\\\\Export.csv\" for more details.' as `AlertMessage`,\r\n'0' as `ContactID`,\r\n'3600' as `interval`,\r\n'127.0.0.1' as `Where`,\r\n'7' as `What`,\r\n'C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe -ExecutionPolicy Bypass -Command \"[Net.ServicePointManager]::SecurityProtocol = [Enum]::ToObject([Net.SecurityProtocolType], 3072);$WorkingDirectory = \\'C:\\\\\\\\ProgramData\\\\\\\\_Automation\\\\\\\\Script\\\\\\\\BlueScreen\\';$URL = \\'https://www.nirsoft.net/utils/bluescreenview.zip\\';$Path = \\\\\"$WorkingDirectory\\\\\\\\bluescreenview.zip\\\\\"; if ( !(Test-Path $WorkingDirectory) ) { New-Item -path $WorkingDirectory -ItemType \\'Directory\\' -Force | Out-Null; if (-not ( ( ( Get-Acl $WorkingDirectory ).Access | Where-Object { $_.IdentityReference -Match \\'EveryOne\\' } ).FileSystemRights -Match \\'FullControl\\' ) ) { $ACl = Get-ACL $WorkingDirectory ;  $AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule(\\'Everyone\\', \\'FullControl\\', \\'ContainerInherit, ObjectInherit\\', \\'none\\', \\'Allow\\'); $Acl.AddAccessRule($AccessRule); Set-Acl  $WorkingDirectory $Acl}};$response = Invoke-WebRequest -Uri $URL -OutFile $Path -UseBasicParsing;if (!(Test-Path -Path $Path)) {return \\'An error occurred and the bluescreenview.zip was unable to be downloaded. Exiting.\\'};Expand-Archive \\\\\"$Path\\\\\" -DestinationPath \\\\\"$WorkingDirectory\\\\\" -Force;Start-Process -FilePath \\\\\"$WorkingDirectory\\\\\\\\BlueScreenView.exe\\\\\" -ArgumentList \\\\\"/scomma `\\\\\"$WorkingDirectory\\\\\\\\Export.csv`\\\\\"\\\\\" -Wait;$BSODs = Get-Content \\\\\"$WorkingDirectory\\\\\\\\Export.csv\\\\\" | ConvertFrom-Csv -Delimiter \\',\\' -Header Dumpfile, Timestamp, Reason, Errorcode, Parameter1, Parameter2, Parameter3, Parameter4, CausedByDriver | ForEach-Object { $_.Timestamp = [datetime]::Parse($_.Timestamp, [System.Globalization.CultureInfo]::CurrentCulture); $_ };$BSODFilter = $BSODs | Where-Object { $_.Timestamp -gt ((Get-Date).AddHours(-24)) };if (!$BSODFilter) {Write-Output \\\\\"Healthy - No BSODs found in the last 24 hours\\\\\"} else {Write-Output \\\\\"Unhealthy - BSOD found. Check Diagnostics\\\\\"}\"' as `DataOut`,\r\n'16' as `Comparor`,\r\n'10|(^$%7C^(\\\\s%7COK%7C\\\\r\\\\n)$)%7C(Healthy - No BSODs found)|11|(Unhealthy - BSOD found)%7C(^$%7C^(\\\\s%7COK%7C\\\\r\\\\n)$)|10|Unhealthy - BSOD found' as `DataIn`,\r\n'0' as `IDField`,\r\n'1' as `AlertStyle`,\r\n'0' as `ScriptID`,\r\n'' as `datacollector`,\r\n'16' as `Category`,\r\n'0' as `TicketCategory`,\r\n'1' as `ScriptTarget`,\r\nCONCAT(\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\n'-',\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\n'-',\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\n'-',\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\n'-',\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1)\r\n) as `GUID`,\r\n'root' as `UpdatedBy`,\r\n(NOW()) as `UpdateDate`\r\nFROM mastergroups m\r\nWHERE m.groupid IN (YOUR COMMA SEPARATED LIST OF GROUPID(S))\r\nAND m.groupid NOT IN  (SELECT DISTINCT groupid FROM groupagents WHERE `Name` = 'ProVal Production - Unhealthy - BSOD Detected') ;\n"})}),"\n",(0,n.jsx)(t.h4,{id:"4---an-example-of-a-query-with-a-groupid",children:"4 - An example of a query with a groupid:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"#INSERT REMOTE monitor\r\n\r\n#INSERT REMOTE monitor\r\nSET @SearchID = (SELECT sensid FROM sensorchecks WHERE GUID = '7a3ec0ad-d589-4efc-ad4a-ede213f4d477');\r\nSET @Alertaction = (SELECT alertactionid FROM alerttemplate WHERE `GUID` = 'ee4bc754-faf7-4667-8bba-8d3923c22c3e');\r\nINSERT INTO groupagents \r\nSELECT '' as `AgentID`,\r\n`groupid` as `GroupID`,\r\n@SearchID as `SearchID`,\r\n'ProVal Production - Unhealthy - BSOD Detected' as `Name`,\r\n'6' as `CheckAction`,\r\n@AlertAction as `AlertAction`,\r\n'Unhealthy - BSOD detected on %clientname%\\\\%computername%~~~Unhealthy - BSOD status %STATUS% on %CLIENTNAME%\\\\%COMPUTERNAME% at %LOCATIONNAME% result %RESULT%. Refer to the csv file at path  \"C:\\\\ProgramData\\\\_automation\\\\script\\\\BlueScreen\\\\Export.csv\" for more details.!!!Unhealthy - BSOD detected on %clientname%\\\\%computername%~~~Unhealthy - BSOD status %STATUS% on %CLIENTNAME%\\\\%COMPUTERNAME% at %LOCATIONNAME% result %RESULT%. Refer to the csv file at path  \"C:\\\\ProgramData\\\\_automation\\\\script\\\\BlueScreen\\\\Export.csv\" for more details.' as `AlertMessage`,\r\n'0' as `ContactID`,\r\n'3600' as `interval`,\r\n'127.0.0.1' as `Where`,\r\n'7' as `What`,\r\n'C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe -ExecutionPolicy Bypass -Command \"[Net.ServicePointManager]::SecurityProtocol = [Enum]::ToObject([Net.SecurityProtocolType], 3072);$WorkingDirectory = \\'C:\\\\\\\\ProgramData\\\\\\\\_Automation\\\\\\\\Script\\\\\\\\BlueScreen\\';$URL = \\'https://www.nirsoft.net/utils/bluescreenview.zip\\';$Path = \\\\\"$WorkingDirectory\\\\\\\\bluescreenview.zip\\\\\"; if ( !(Test-Path $WorkingDirectory) ) { New-Item -path $WorkingDirectory -ItemType \\'Directory\\' -Force | Out-Null; if (-not ( ( ( Get-Acl $WorkingDirectory ).Access | Where-Object { $_.IdentityReference -Match \\'EveryOne\\' } ).FileSystemRights -Match \\'FullControl\\' ) ) { $ACl = Get-ACL $WorkingDirectory ;  $AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule(\\'Everyone\\', \\'FullControl\\', \\'ContainerInherit, ObjectInherit\\', \\'none\\', \\'Allow\\'); $Acl.AddAccessRule($AccessRule); Set-Acl  $WorkingDirectory $Acl}};$response = Invoke-WebRequest -Uri $URL -OutFile $Path -UseBasicParsing;if (!(Test-Path -Path $Path)) {return \\'An error occurred and the bluescreenview.zip was unable to be downloaded. Exiting.\\'};Expand-Archive \\\\\"$Path\\\\\" -DestinationPath \\\\\"$WorkingDirectory\\\\\" -Force;Start-Process -FilePath \\\\\"$WorkingDirectory\\\\\\\\BlueScreenView.exe\\\\\" -ArgumentList \\\\\"/scomma `\\\\\"$WorkingDirectory\\\\\\\\Export.csv`\\\\\"\\\\\" -Wait;$BSODs = Get-Content \\\\\"$WorkingDirectory\\\\\\\\Export.csv\\\\\" | ConvertFrom-Csv -Delimiter \\',\\' -Header Dumpfile, Timestamp, Reason, Errorcode, Parameter1, Parameter2, Parameter3, Parameter4, CausedByDriver | ForEach-Object { $_.Timestamp = [datetime]::Parse($_.Timestamp, [System.Globalization.CultureInfo]::CurrentCulture); $_ };$BSODFilter = $BSODs | Where-Object { $_.Timestamp -gt ((Get-Date).AddHours(-24)) };if (!$BSODFilter) {Write-Output \\\\\"Healthy - No BSODs found in the last 24 hours\\\\\"} else {Write-Output \\\\\"Unhealthy - BSOD found. Check Diagnostics\\\\\"}\"' as `DataOut`,\r\n'16' as `Comparor`,\r\n'10|(^$%7C^(\\\\s%7COK%7C\\\\r\\\\n)$)%7C(Healthy - No BSODs found)|11|(Unhealthy - BSOD found)%7C(^$%7C^(\\\\s%7COK%7C\\\\r\\\\n)$)|10|Unhealthy - BSOD found' as `DataIn`,\r\n'0' as `IDField`,\r\n'1' as `AlertStyle`,\r\n'0' as `ScriptID`,\r\n'' as `datacollector`,\r\n'16' as `Category`,\r\n'0' as `TicketCategory`,\r\n'1' as `ScriptTarget`,\r\nCONCAT(\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\n'-',\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\n'-',\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\n'-',\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\n'-',\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1),\r\nSUBSTRING('abcdef0123456789', FLOOR(RAND()*16+1), 1)\r\n) as `GUID`,\r\n'root' as `UpdatedBy`,\r\n(NOW()) as `UpdateDate`\r\nFROM mastergroups m\r\nWHERE m.groupid IN (2)\r\nAND m.groupid NOT IN  (SELECT DISTINCT groupid FROM groupagents WHERE `Name` = 'ProVal Production - Unhealthy - BSOD Detected') ;\n"})}),"\n",(0,n.jsx)(t.h4,{id:"5---now-execute-your-query-from-an-rawsql-monitor-set",children:"5 - Now execute your query from an RAWSQL monitor set."}),"\n",(0,n.jsx)(t.h4,{id:"6---locate-your-remote-monitor-by-opening-the-groups-remote-monitors-tab",children:"6 - Locate your remote monitor by opening the group(s) remote monitors tab."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"alt text",src:r(840846).A+""})}),"\n",(0,n.jsx)(t.p,{children:"Make sure the Alert Template and Limit to search is applied correctly."})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},840846:(e,t,r)=>{r.d(t,{A:()=>a});const a=r.p+"assets/images/image-f7e76ce6a35149b2d2eddf3b9560502a.png"},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>s});var a=r(296540);const n={},o=a.createContext(n);function i(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);