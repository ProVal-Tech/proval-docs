"use strict";(self.webpackChunkproval_docs=self.webpackChunkproval_docs||[]).push([[83094],{969957:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"cwa/scripts/8a8349f6-0f93-4e85-9a33-f6c7867f4bf5","title":"Windows Update Orchestrator Fix - Rename File to Reboot.Bak","description":"This document describes the Update Orchestrator Autofix Script, designed to prevent unauthorized reboots and patch installations on endpoints by renaming the reboot file. It operates as an autofix for the Update Orchestrator Service Status Detection monitor, ensuring that updates are managed with prior approval.","source":"@site/docs/cwa/scripts/Windows Update Orchestrator Fix - Rename File to Reboot.Bak.md","sourceDirName":"cwa/scripts","slug":"/cwa/scripts/8a8349f6-0f93-4e85-9a33-f6c7867f4bf5","permalink":"/proval-docs/docs/cwa/scripts/8a8349f6-0f93-4e85-9a33-f6c7867f4bf5","draft":false,"unlisted":false,"editUrl":"https://github.com/proval-tech/proval-docs/tree/main/docs/cwa/scripts/Windows Update Orchestrator Fix - Rename File to Reboot.Bak.md","tags":[{"inline":false,"label":"Software","permalink":"/proval-docs/docs/tags/software","description":"Documents related to software applications and their lifecycle management"},{"inline":false,"label":"Update","permalink":"/proval-docs/docs/tags/update","description":"Documents discussing software and system updates and their management"},{"inline":false,"label":"Windows","permalink":"/proval-docs/docs/tags/windows","description":"Documents related to Microsoft Windows operating system and its functionalities"}],"version":"current","frontMatter":{"id":"8a8349f6-0f93-4e85-9a33-f6c7867f4bf5","title":"Windows Update Orchestrator Fix - Rename File to Reboot.Bak","title_meta":"Windows Update Orchestrator Fix - Rename File to Reboot.Bak","keywords":["autofix","update","orchestrator","service","status","detection","rename","patches"],"description":"This document describes the Update Orchestrator Autofix Script, designed to prevent unauthorized reboots and patch installations on endpoints by renaming the reboot file. It operates as an autofix for the Update Orchestrator Service Status Detection monitor, ensuring that updates are managed with prior approval.","tags":["software","update","windows"],"draft":false,"unlisted":false},"sidebar":"contentSidebar","previous":{"title":"Windows Update Notification (Tray Icon) - Disable","permalink":"/proval-docs/docs/cwa/scripts/ae80d21c-908e-413f-97f1-1a4e370553ae"},"next":{"title":"Windows Update Report DV","permalink":"/proval-docs/docs/cwa/scripts/41141ff5-ef57-4900-93d4-642b4a9d254f"}}');var o=a(474848),r=a(28453);const i={id:"8a8349f6-0f93-4e85-9a33-f6c7867f4bf5",title:"Windows Update Orchestrator Fix - Rename File to Reboot.Bak",title_meta:"Windows Update Orchestrator Fix - Rename File to Reboot.Bak",keywords:["autofix","update","orchestrator","service","status","detection","rename","patches"],description:"This document describes the Update Orchestrator Autofix Script, designed to prevent unauthorized reboots and patch installations on endpoints by renaming the reboot file. It operates as an autofix for the Update Orchestrator Service Status Detection monitor, ensuring that updates are managed with prior approval.",tags:["software","update","windows"],draft:!1,unlisted:!1},n=void 0,c={},d=[{value:"Summary",id:"summary",level:2},{value:"Sample Run",id:"sample-run",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Variables",id:"variables",level:2},{value:"Process",id:"process",level:2},{value:"Output",id:"output",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsxs)(t.p,{children:["This script is set up as the autofix for the ",(0,o.jsx)(t.a,{href:"/proval-docs/docs/cwa/monitors/e3c5aeb1-144d-4c12-9b33-2d56d05804ce",children:"Update Orchestrator Service Status Detection"}),' monitor. This script will rename the "reboot" file so the update orchestrator will not issue a reboot to the machine. This will prevent the update orchestrator from installing patches on the endpoint without prior approval. This script is a function script and it will not run manually.']}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Time Saved by Automation:"})," 5 Minutes"]}),"\n",(0,o.jsx)(t.h2,{id:"sample-run",children:"Sample Run"}),"\n",(0,o.jsxs)(t.p,{children:["This script is a function script and cannot be run manually. It should only run as an autofix for the ",(0,o.jsx)(t.a,{href:"/proval-docs/docs/cwa/monitors/e3c5aeb1-144d-4c12-9b33-2d56d05804ce",children:"Update Orchestrator Service Status Detection"})," monitor."]}),"\n",(0,o.jsx)(t.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,o.jsxs)(t.p,{children:["This script is dependent upon the ",(0,o.jsx)(t.a,{href:"/proval-docs/docs/cwa/monitors/e3c5aeb1-144d-4c12-9b33-2d56d05804ce",children:"Update Orchestrator Service Status Detection"})," monitor."]}),"\n",(0,o.jsx)(t.h2,{id:"variables",children:"Variables"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"@Output@"})," - the output from the PowerShell that renames the file."]}),"\n",(0,o.jsx)(t.h2,{id:"process",children:"Process"}),"\n",(0,o.jsx)(t.p,{children:'The monitor will check for the condition, and this script will automatically execute. The script will take the "reboot" file in the UpdateOrchestrator folder and rename it to "reboot.bak". It will then verify that the results of the PowerShell were successful. On success, the script will exit with a log message indicating the file was renamed. On failure, the script will exit with an error and a log message stating that the file rename failed.'}),"\n",(0,o.jsx)(t.h2,{id:"output",children:"Output"}),"\n",(0,o.jsx)(t.p,{children:"Script log messages only."})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>n});var s=a(296540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);