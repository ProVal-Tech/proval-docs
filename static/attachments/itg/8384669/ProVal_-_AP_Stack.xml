<?xml version="1.0" encoding="utf-8"?>
<ScExport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.kaseya.com/vsa/2008/12/Scripting">
  <Folder name="PVAL Stack" treePres="3">
    <Folder name="Master Process - Global" treePres="3">
      <Folder name="Daily Procedures" treePres="3">
        <Procedure name="Get Office Version [CF]" treePres="3" id="351234033" folderId="508766948761775" treeFullPath="PVAL Stack.Master Process - Global.Daily Procedures">
          <Body description="Overview: This procedure will check for the MS Office Version and update the custom field &quot;xPVAL MS Office Version&quot;.&#xA;Requirements: none&#xA;Parameters: none">
            <Statement description="2020-10-06 OfficeVersion david.turner@provaltech.com" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="OfficeVersion" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectName" />
            </Statement>
            <Statement description="- project parameters" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value=" " />
              <Parameter xsi:type="StringParameter" name="VariableName" value="paramInput" />
            </Statement>
            <Statement description="- derived operation" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="https://file.provaltech.com/repo/app" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="baseURL" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\provaltech\app\#projectName#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectDir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#." />
                <Parameter xsi:type="EnumParameter" name="Condition" value="NotExists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="md #projectDir#" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="#baseURL#/#projectName#.exe" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#projectDir#\#projectName#-temp.txt" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-temp.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                <Parameter xsi:type="StringParameter" name="Value" value="File or directory not found" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#.exe" />
                </Statement>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="ren &quot;#projectDir#\#projectName#-temp.txt&quot; &quot;#projectName#.exe&quot;" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement description="= operation =" name="ExecuteShellCommand" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Command" value="&quot;#projectDir#\#projectName#.exe&quot; #paramInput#" />
              <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
              <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
            </Statement>
            <If description="= data collection =">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-data.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-data.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="dataVal" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="data: #dataVal#" />
                </Statement>
                <Statement name="UpdateSystemInfo" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL MS Office Version" />
                  <Parameter xsi:type="StringParameter" name="Value" value="#dataVal#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="- office detection failed" />
                </Statement>
                <Statement name="UpdateSystemInfo" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL MS Office Version" />
                  <Parameter xsi:type="StringParameter" name="Value" value="NA" />
                </Statement>
              </Else>
            </If>
            <If description="- derived closing operation">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-errors.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Parameter1" value="TYPE &quot;#projectDir#\#projectName#-errors.txt&quot;" />
                  <Parameter xsi:type="StringParameter" name="Parameter2" value="False" />
                  <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="errors: #global:cmdresults#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="- script successful" />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Get Sentinel One Status [CF]" treePres="3" id="1960234648" folderId="508766948761775" treeFullPath="PVAL Stack.Master Process - Global.Daily Procedures">
          <Body description="This procedure fetches the status of Sentinel One and displays it on a custom field named xPVAL SentinelOne Status as Installed or not">
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="AgentTempDirectory" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="workingDir" />
            </Statement>
            <If description="- get app install status">
              <Condition name="Windows 32 or 64 Bit Check">
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
              </Condition>
              <Then>
                <If description="">
                  <Condition name="TestFile">
                    <Parameter xsi:type="StringParameter" name="Path" value="C:\Program Files\SentinelOne\nul" />
                    <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                    <Parameter xsi:type="StringParameter" name="Value" value="SentinelOne" />
                  </Condition>
                  <Then>
                    <If description="">
                      <Condition name="ApplicationRunning">
                        <Parameter xsi:type="StringParameter" name="ApplicationName" value="SentinelAgent.exe" />
                      </Condition>
                      <Then>
                        <Statement name="UpdateSystemInfo" continueOnFail="false">
                          <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL SentinelOne Status" />
                          <Parameter xsi:type="StringParameter" name="Value" value="Installed | Active" />
                        </Statement>
                      </Then>
                      <Else>
                        <Statement name="UpdateSystemInfo" continueOnFail="false">
                          <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL SentinelOne Status" />
                          <Parameter xsi:type="StringParameter" name="Value" value="Installed | Disabled" />
                        </Statement>
                      </Else>
                    </If>
                  </Then>
                  <Else>
                    <Statement name="UpdateSystemInfo" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL SentinelOne Status" />
                      <Parameter xsi:type="StringParameter" name="Value" value="Not Installed" />
                    </Statement>
                  </Else>
                </If>
              </Then>
              <Else>
                <If description="">
                  <Condition name="TestFile">
                    <Parameter xsi:type="StringParameter" name="Path" value="C:\Program Files (x86)\SentinelOne\nul" />
                    <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                    <Parameter xsi:type="StringParameter" name="Value" value="SentinelOne" />
                  </Condition>
                  <Then>
                    <If description="">
                      <Condition name="ApplicationRunning">
                        <Parameter xsi:type="StringParameter" name="ApplicationName" value="SentinelAgent.exe" />
                      </Condition>
                      <Then>
                        <Statement name="UpdateSystemInfo" continueOnFail="false">
                          <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL SentinelOne Status" />
                          <Parameter xsi:type="StringParameter" name="Value" value="Installed | Active" />
                        </Statement>
                      </Then>
                      <Else>
                        <Statement name="UpdateSystemInfo" continueOnFail="false">
                          <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL SentinelOne Status" />
                          <Parameter xsi:type="StringParameter" name="Value" value="Installed | Disabled" />
                        </Statement>
                      </Else>
                    </If>
                  </Then>
                  <Else>
                    <Statement name="UpdateSystemInfo" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL SentinelOne Status" />
                      <Parameter xsi:type="StringParameter" name="Value" value="Not Installed" />
                    </Statement>
                  </Else>
                </If>
                <If description="">
                  <Condition name="TestFile">
                    <Parameter xsi:type="StringParameter" name="Path" value="C:\Program Files\SentinelOne\nul" />
                    <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                    <Parameter xsi:type="StringParameter" name="Value" value="SentinelOne" />
                  </Condition>
                  <Then>
                    <If description="">
                      <Condition name="ApplicationRunning">
                        <Parameter xsi:type="StringParameter" name="ApplicationName" value="SentinelAgent.exe" />
                      </Condition>
                      <Then>
                        <Statement name="UpdateSystemInfo" continueOnFail="false">
                          <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL SentinelOne Status" />
                          <Parameter xsi:type="StringParameter" name="Value" value="Installed | Active" />
                        </Statement>
                      </Then>
                      <Else>
                        <Statement name="UpdateSystemInfo" continueOnFail="false">
                          <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL SentinelOne Status" />
                          <Parameter xsi:type="StringParameter" name="Value" value="Installed | Disabled" />
                        </Statement>
                      </Else>
                    </If>
                  </Then>
                  <Else>
                    <Statement name="UpdateSystemInfo" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL SentinelOne Status" />
                      <Parameter xsi:type="StringParameter" name="Value" value="Not Installed" />
                    </Statement>
                  </Else>
                </If>
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Get Webroot Status [CF]" treePres="3" id="2133491842" folderId="508766948761775" treeFullPath="PVAL Stack.Master Process - Global.Daily Procedures">
          <Body description="Overview: This procedure will check for the MS Office Version and update the custom field &quot;xPVAL Webroot Status&quot;.&#xA;Requirements: none&#xA;Parameters: none">
            <If description="2020-10-09 Get Webroot Status&#xD;&#xA;- get app install status">
              <Condition name="Windows 32 or 64 Bit Check">
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
              </Condition>
              <Then>
                <If description="">
                  <Condition name="TestFile">
                    <Parameter xsi:type="StringParameter" name="Path" value="C:\Program Files (x86)\Webroot\WRSA.exe" />
                    <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                    <Parameter xsi:type="StringParameter" name="Value" value="" />
                  </Condition>
                  <Then>
                    <If description="">
                      <Condition name="ApplicationRunning">
                        <Parameter xsi:type="StringParameter" name="ApplicationName" value="WRSA.exe" />
                      </Condition>
                      <Then>
                        <Statement name="UpdateSystemInfo" continueOnFail="false">
                          <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Webroot Status" />
                          <Parameter xsi:type="StringParameter" name="Value" value="Installed | Active" />
                        </Statement>
                      </Then>
                      <Else>
                        <Statement name="UpdateSystemInfo" continueOnFail="false">
                          <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Webroot Status" />
                          <Parameter xsi:type="StringParameter" name="Value" value="Installed | Disabled" />
                        </Statement>
                      </Else>
                    </If>
                  </Then>
                  <Else>
                    <Statement name="UpdateSystemInfo" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Webroot Status" />
                      <Parameter xsi:type="StringParameter" name="Value" value="Not Installed" />
                    </Statement>
                  </Else>
                </If>
              </Then>
              <Else>
                <If description="">
                  <Condition name="TestFile">
                    <Parameter xsi:type="StringParameter" name="Path" value="C:\Program Files\Webroot\WRSA.exe" />
                    <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                    <Parameter xsi:type="StringParameter" name="Value" value="" />
                  </Condition>
                  <Then>
                    <If description="">
                      <Condition name="ApplicationRunning">
                        <Parameter xsi:type="StringParameter" name="ApplicationName" value="WRSA.exe" />
                      </Condition>
                      <Then>
                        <Statement name="UpdateSystemInfo" continueOnFail="false">
                          <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Webroot Status" />
                          <Parameter xsi:type="StringParameter" name="Value" value="Installed | Active" />
                        </Statement>
                      </Then>
                      <Else>
                        <Statement name="UpdateSystemInfo" continueOnFail="false">
                          <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Webroot Status" />
                          <Parameter xsi:type="StringParameter" name="Value" value="Installed | Disabled" />
                        </Statement>
                      </Else>
                    </If>
                  </Then>
                  <Else>
                    <Statement name="UpdateSystemInfo" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Webroot Status" />
                      <Parameter xsi:type="StringParameter" name="Value" value="Not Installed" />
                    </Statement>
                  </Else>
                </If>
              </Else>
            </If>
          </Body>
        </Procedure>
      </Folder>
      <Folder name="Monthly Procedures" treePres="3">
        <Folder name="Agent Branding Scripts" treePres="3">
          <Procedure name="Change Agent Add/Remove Info [Params, File]" treePres="3" id="1079885418" folderId="831306046355192" treeFullPath="PVAL Stack.Master Process - Global.Monthly Procedures.Agent Branding Scripts">
            <Body description="Overview: This script changes the default Agent name and icon in Add/Remove Programs list. &#xA;Requirements: MSP faviconPreview.ico in managed files root folder&#xA;Parameters: licenseGuid, appDisplayName, appPublisher">
              <Statement description="2020-01-27 Change Kaseya Agent Application Info&#xD;&#xA;- supply the vars below" name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="AgentInstallDirectory" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="agentPath" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="KAKSAAS182537055421196" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="licenseGuid" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="FNI Agent" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="appDisplayName" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="FNI" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="appPublisher" />
              </Statement>
              <Statement description="= operation =" name="WriteFile" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Path" value="#agentPath#/bluekPreview.ico" />
                <Parameter xsi:type="StringParameter" name="ManagedFile" value="VSASharedFiles\bluekPreview.ico" />
                <Parameter xsi:type="BooleanParameter" name="DeleteAfter" value="False" />
              </Statement>
              <If description="">
                <Condition name="Windows 32 or 64 Bit Check">
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                </Condition>
                <Then>
                  <Statement name="SetRegistryValue" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RegistryPath" value="HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\#licenseGuid#\DisplayName" />
                    <Parameter xsi:type="StringParameter" name="Value" value="#appDisplayName#" />
                    <Parameter xsi:type="EnumParameter" name="DataType" value="String" />
                  </Statement>
                  <Statement name="SetRegistryValue" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RegistryPath" value="HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\#licenseGuid#\DisplayIcon" />
                    <Parameter xsi:type="StringParameter" name="Value" value="#agentPath#\bluekPreview.ico" />
                    <Parameter xsi:type="EnumParameter" name="DataType" value="String" />
                  </Statement>
                  <Statement name="SetRegistryValue" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RegistryPath" value="HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\#licenseGuid#\Publisher" />
                    <Parameter xsi:type="StringParameter" name="Value" value="#appPublisher#" />
                    <Parameter xsi:type="EnumParameter" name="DataType" value="String" />
                  </Statement>
                </Then>
                <Else>
                  <Statement name="SetRegistryValue" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RegistryPath" value="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\#licenseGuid#\DisplayName" />
                    <Parameter xsi:type="StringParameter" name="Value" value="#appDisplayName#" />
                    <Parameter xsi:type="EnumParameter" name="DataType" value="String" />
                  </Statement>
                  <Statement name="SetRegistryValue" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RegistryPath" value="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\#licenseGuid#\DisplayIcon" />
                    <Parameter xsi:type="StringParameter" name="Value" value="#agentPath#\bluekPreview.ico" />
                    <Parameter xsi:type="EnumParameter" name="DataType" value="String" />
                  </Statement>
                  <Statement name="SetRegistryValue" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RegistryPath" value="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\#licenseGuid#\Publisher" />
                    <Parameter xsi:type="StringParameter" name="Value" value="#appPublisher#" />
                    <Parameter xsi:type="EnumParameter" name="DataType" value="String" />
                  </Statement>
                </Else>
              </If>
            </Body>
          </Procedure>
          <Procedure name="Rename Agent Service [Params]" treePres="3" id="1021259410" folderId="831306046355192" treeFullPath="PVAL Stack.Master Process - Global.Monthly Procedures.Agent Branding Scripts">
            <Body description="Overview: Renames the Kaseya agent service to MSP name&#xA;Requirements: reboot needed for change to take effect&#xA;Parameters: licenseGuid, endpointGuid, agentSVCName, endpointSVCName">
              <Statement description="2020-01-27 Rename Kaseya Agent Service&#xD;&#xA;- supply the vars below" name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="KAKSAAS182537055421196" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="licenseGuid" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="KAENDKSAAS182537055421196" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="endpointGuid" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="FNI Agent" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="agentSVCName" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="FNI Endpoint Agent" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="endpointSVCName" />
              </Statement>
              <Statement description="= operation =" name="SetRegistryValue" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="RegistryPath" value="HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\#licenseGuid#\DisplayName" />
                <Parameter xsi:type="StringParameter" name="Value" value="#agentSVCName#" />
                <Parameter xsi:type="EnumParameter" name="DataType" value="String" />
              </Statement>
              <Statement name="SetRegistryValue" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="RegistryPath" value="HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\#licenseGuid#\Description" />
                <Parameter xsi:type="StringParameter" name="Value" value="This is a system management service. Do not stop or disable this service under any circumstances." />
                <Parameter xsi:type="EnumParameter" name="DataType" value="String" />
              </Statement>
              <Statement name="SetRegistryValue" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="RegistryPath" value="HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\#endpointGuid#\DisplayName" />
                <Parameter xsi:type="StringParameter" name="Value" value="#endpointSVCName#" />
                <Parameter xsi:type="EnumParameter" name="DataType" value="String" />
              </Statement>
            </Body>
          </Procedure>
        </Folder>
      </Folder>
      <Folder name="Weekly Procedures" treePres="3">
        <Procedure name="Bitlocker Key Retrieval" treePres="3" id="1028509200" folderId="316062025966151" treeFullPath="PVAL Stack.Master Process - Global.Weekly Procedures">
          <Body description="">
            <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="$data = Get-BitLockerVolume | ForEach-Object {Write-Output &quot;Drive $($_.MountPoint) $($_.KeyProtector.RecoveryPassword)&quot;}; if($data){$data}" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
            </Statement>
            <If description="">
              <Condition name="CheckVariable">
                <Parameter xsi:type="StringParameter" name="VariableName" value="#Global:PSResult#" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                <Parameter xsi:type="StringParameter" name="Value" value="Drive" />
              </Condition>
              <Then>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="No Recovery Key found on endpoint." />
                </Statement>
                <Statement name="UpdateSystemInfo" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Bitlocker Key" />
                  <Parameter xsi:type="StringParameter" name="Value" value="None" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="#Global:PSResult#" />
                </Statement>
                <Statement name="UpdateSystemInfo" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Bitlocker Key" />
                  <Parameter xsi:type="StringParameter" name="Value" value="#Global:PSResult#" />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Drive List Collection" treePres="3" id="2016576049" folderId="316062025966151" treeFullPath="PVAL Stack.Master Process - Global.Weekly Procedures">
          <Body description="">
            <Statement name="Execute Powershell" continueOnFail="false" osType="Windows">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="((Get-Partition | Where-Object {($_.DriveLetter -and $_.Size -gt 50000000000) -and ($_.diskpath -notmatch 'usb')} | Select-Object -expandProperty DriveLetter) -join ': ')+':'" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
            </Statement>
            <Statement name="WriteScriptLogEntry" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Comment" value="#global:PSResult#" />
            </Statement>
            <Statement name="UpdateSystemInfo" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Drive List" />
              <Parameter xsi:type="StringParameter" name="Value" value="#global:PSResult#" />
            </Statement>
          </Body>
        </Procedure>
        <Procedure name="Get BitLocker Status for All Drives [CF]" treePres="3" id="752022898" folderId="316062025966151" treeFullPath="PVAL Stack.Master Process - Global.Weekly Procedures">
          <Body description="Overview: This procedure will check the BitLocker Status for all drives and update the Custom Field &quot;xPVAL BitLocker&quot;.&#xA;Example: C: yes D: no&#xA;Requirements: none&#xA;Parameters: none">
            <Statement description="2020-10-08 BitLockerStatus david.turner@provaltech.com" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="BitLockerStatus" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectName" />
            </Statement>
            <Statement description="- project parameters" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value=" " />
              <Parameter xsi:type="StringParameter" name="VariableName" value="paramInput" />
            </Statement>
            <Statement description="- derived operation" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="https://file.provaltech.com/repo/app" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="baseURL" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\provaltech\app\#projectName#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectDir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#." />
                <Parameter xsi:type="EnumParameter" name="Condition" value="NotExists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="md #projectDir#" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="#baseURL#/#projectName#.exe" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#projectDir#\#projectName#-temp.txt" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-temp.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                <Parameter xsi:type="StringParameter" name="Value" value="File or directory not found" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#.exe" />
                </Statement>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="ren &quot;#projectDir#\#projectName#-temp.txt&quot; &quot;#projectName#.exe&quot;" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement description="= operation =" name="ExecuteShellCommand" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Command" value="&quot;#projectDir#\#projectName#.exe&quot; #paramInput#" />
              <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
              <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
            </Statement>
            <If description="= data collection =">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-data.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-data.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="dataVal" />
                </Statement>
                <Statement name="UpdateSystemInfo" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL BitLocker" />
                  <Parameter xsi:type="StringParameter" name="Value" value="#dataVal#" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="data: #dataVal#" />
                </Statement>
              </Then>
            </If>
            <If description="- derived closing operation">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-errors.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-errors.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="errorVal" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="errors: #errorVal#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="- script successful" />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Get Exchange Version [CF]" treePres="3" id="513216909" folderId="316062025966151" treeFullPath="PVAL Stack.Master Process - Global.Weekly Procedures">
          <Body description="Overview: Queries Servers to Isolate if EXG Running and What Version&#xA;Uses sc query to isolate services specific to version of EXG. Uses sc interrogate msexchangeis to isolate if EXG running&#xA;Stores all data in custom field: xPVAL Exchange&#xA;Requirements: none&#xA;Parameters: none">
            <Statement description="2020-08-10 - EXG Custom Fields Harvest&#xD;&#xA;= SC Active =" name="Execute Shell Command - Get Results to Variable" continueOnFail="false" osType="Windows">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="sc interrogate msexchangeis" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="False" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
            </Statement>
            <If description="">
              <Condition name="CheckVariable">
                <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                <Parameter xsi:type="StringParameter" name="Value" value="RUNNING" />
              </Condition>
              <Then>
                <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false" osType="Windows">
                  <Parameter xsi:type="StringParameter" name="Parameter1" value="sc query | find &quot;Microsoft Exchange&quot;" />
                  <Parameter xsi:type="StringParameter" name="Parameter2" value="False" />
                  <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
                </Statement>
                <If description="">
                  <Condition name="CheckVariable">
                    <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
                    <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                    <Parameter xsi:type="StringParameter" name="Value" value="Microsoft Exchange" />
                  </Condition>
                  <Then>
                    <Statement name="WriteScriptLogEntry" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="Comment" value="xPVAL Exchange: N/A" />
                    </Statement>
                    <Statement name="UpdateSystemInfo" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Exchange" />
                      <Parameter xsi:type="StringParameter" name="Value" value="N/A" />
                    </Statement>
                  </Then>
                  <Else>
                    <If description="">
                      <Condition name="CheckVariable">
                        <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
                        <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                        <Parameter xsi:type="StringParameter" name="Value" value="Exchange Compliance" />
                      </Condition>
                      <Then>
                        <Statement name="WriteScriptLogEntry" continueOnFail="false">
                          <Parameter xsi:type="StringParameter" name="Comment" value="xPVAL Exchange: 2016" />
                        </Statement>
                        <Statement name="UpdateSystemInfo" continueOnFail="false">
                          <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Exchange" />
                          <Parameter xsi:type="StringParameter" name="Value" value="2016 Active" />
                        </Statement>
                      </Then>
                      <Else>
                        <If description="">
                          <Condition name="CheckVariable">
                            <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
                            <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                            <Parameter xsi:type="StringParameter" name="Value" value="Health Manager" />
                          </Condition>
                          <Then>
                            <Statement name="WriteScriptLogEntry" continueOnFail="false">
                              <Parameter xsi:type="StringParameter" name="Comment" value="xPVAL Exchange: 2013" />
                            </Statement>
                            <Statement name="UpdateSystemInfo" continueOnFail="false">
                              <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Exchange" />
                              <Parameter xsi:type="StringParameter" name="Value" value="2013 Active" />
                            </Statement>
                          </Then>
                          <Else>
                            <If description="">
                              <Condition name="CheckVariable">
                                <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
                                <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                                <Parameter xsi:type="StringParameter" name="Value" value="RPC Client Access" />
                              </Condition>
                              <Then>
                                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                                  <Parameter xsi:type="StringParameter" name="Comment" value="xPVAL Exchange: 2010" />
                                </Statement>
                                <Statement name="UpdateSystemInfo" continueOnFail="false">
                                  <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Exchange" />
                                  <Parameter xsi:type="StringParameter" name="Value" value="2010 Active" />
                                </Statement>
                              </Then>
                              <Else>
                                <If description="">
                                  <Condition name="CheckVariable">
                                    <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
                                    <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                                    <Parameter xsi:type="StringParameter" name="Value" value="Replication Service" />
                                  </Condition>
                                  <Then>
                                    <Statement name="WriteScriptLogEntry" continueOnFail="false">
                                      <Parameter xsi:type="StringParameter" name="Comment" value="xPVAL Exchange: 2007" />
                                    </Statement>
                                    <Statement name="UpdateSystemInfo" continueOnFail="false">
                                      <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Exchange" />
                                      <Parameter xsi:type="StringParameter" name="Value" value="2007 Active" />
                                    </Statement>
                                  </Then>
                                  <Else>
                                    <If description="">
                                      <Condition name="CheckVariable">
                                        <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
                                        <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                                        <Parameter xsi:type="StringParameter" name="Value" value="Routing Engine" />
                                      </Condition>
                                      <Then>
                                        <Statement name="WriteScriptLogEntry" continueOnFail="false">
                                          <Parameter xsi:type="StringParameter" name="Comment" value="xPVAL Exchange: 2003" />
                                        </Statement>
                                        <Statement name="UpdateSystemInfo" continueOnFail="false">
                                          <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Exchange" />
                                          <Parameter xsi:type="StringParameter" name="Value" value="2003 Active" />
                                        </Statement>
                                      </Then>
                                    </If>
                                  </Else>
                                </If>
                              </Else>
                            </If>
                          </Else>
                        </If>
                      </Else>
                    </If>
                  </Else>
                </If>
              </Then>
            </If>
            <If description="">
              <Condition name="CheckVariable">
                <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                <Parameter xsi:type="StringParameter" name="Value" value="The service has not been started." />
              </Condition>
              <Then>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="xPVAL Exchange: Inactive" />
                </Statement>
                <Statement name="UpdateSystemInfo" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Exchange" />
                  <Parameter xsi:type="StringParameter" name="Value" value="Disabled" />
                </Statement>
              </Then>
            </If>
            <If description="">
              <Condition name="CheckVariable">
                <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                <Parameter xsi:type="StringParameter" name="Value" value="The specified service does not exist" />
              </Condition>
              <Then>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="xPVAL Exchange: N/A" />
                </Statement>
                <Statement name="UpdateSystemInfo" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Exchange" />
                  <Parameter xsi:type="StringParameter" name="Value" value="N/A" />
                </Statement>
              </Then>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Get OS Install Date [CF]" treePres="3" id="1883243422" folderId="316062025966151" treeFullPath="PVAL Stack.Master Process - Global.Weekly Procedures">
          <Body description="Overview: This procedure will check for the OS Install Date and update the Custom Field &quot;xPVAL OS Install Date&quot;.&#xA;Requirements: none&#xA;Parameters: none">
            <Statement description="2020-10-07 GetOSIncept david.turner@provaltech.com" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="GetOSIncept" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectName" />
            </Statement>
            <Statement description="- project parameters" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value=" " />
              <Parameter xsi:type="StringParameter" name="VariableName" value="paramInput" />
            </Statement>
            <Statement description="- derived operation" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="https://file.provaltech.com/repo/app" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="baseURL" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\provaltech\app\#projectName#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectDir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#." />
                <Parameter xsi:type="EnumParameter" name="Condition" value="NotExists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="md #projectDir#" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="#baseURL#/#projectName#.exe" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#projectDir#\#projectName#-temp.txt" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-temp.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                <Parameter xsi:type="StringParameter" name="Value" value="File or directory not found" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#.exe" />
                </Statement>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="ren &quot;#projectDir#\#projectName#-temp.txt&quot; &quot;#projectName#.exe&quot;" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement description="= operation =" name="ExecuteShellCommand" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Command" value="&quot;#projectDir#\#projectName#.exe&quot; #paramInput#" />
              <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
              <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
            </Statement>
            <If description="= data collection =">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-data.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-data.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="dataVal" />
                </Statement>
                <Statement name="UpdateSystemInfo" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL OS Install Date" />
                  <Parameter xsi:type="StringParameter" name="Value" value="#dataVal#" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="data: #dataVal#" />
                </Statement>
              </Then>
            </If>
            <If description="- derived closing operation">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-errors.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-errors.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="errorVal" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="errors: #errorVal#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="- script successful" />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Get PDC Status [CF]" treePres="3" id="1218192449" folderId="316062025966151" treeFullPath="PVAL Stack.Master Process - Global.Weekly Procedures">
          <Body description="Overview: This procedure will check for the Primary Domain Controller Status and update the Custom Field &quot;xPVAL Primary Domain Controller&quot;.&#xA;Requirements: none&#xA;Parameters: none">
            <Statement description="2020-10-08 GetPDC david.turner@provaltech.com" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="GetPDC" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectName" />
            </Statement>
            <Statement description="- project parameters" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value=" " />
              <Parameter xsi:type="StringParameter" name="VariableName" value="paramInput" />
            </Statement>
            <Statement description="- derived operation" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="https://file.provaltech.com/repo/app" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="baseURL" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\provaltech\app\#projectName#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectDir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#." />
                <Parameter xsi:type="EnumParameter" name="Condition" value="NotExists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="md #projectDir#" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="#baseURL#/#projectName#.exe" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#projectDir#\#projectName#-temp.txt" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-temp.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                <Parameter xsi:type="StringParameter" name="Value" value="File or directory not found" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#.exe" />
                </Statement>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="ren &quot;#projectDir#\#projectName#-temp.txt&quot; &quot;#projectName#.exe&quot;" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement description="= operation =" name="ExecuteShellCommand" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Command" value="&quot;#projectDir#\#projectName#.exe&quot; #paramInput#" />
              <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
              <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
            </Statement>
            <If description="= data collection =">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-data.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-data.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="dataVal" />
                </Statement>
                <Statement name="UpdateSystemInfo" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Primary Domain Controller" />
                  <Parameter xsi:type="StringParameter" name="Value" value="#dataVal#" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="data: #dataVal#" />
                </Statement>
              </Then>
            </If>
            <If description="- derived closing operation">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-errors.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-errors.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="errorVal" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="errors: #errorVal#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="- script successful" />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Get SQL Active and Version [CF]" treePres="3" id="1930258889" folderId="316062025966151" treeFullPath="PVAL Stack.Master Process - Global.Weekly Procedures">
          <Body description="Overview: This procedure will check for the SQL Status and Version and update the Custom Field &quot;xPVAL SQL Server&quot;.&#xA;Requirements: none&#xA;Parameters: none">
            <Statement description="2020-08-12 SQLHarvest david.turner@provaltech.com" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="SQLHarvest" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectName" />
            </Statement>
            <Statement description="- project parameters" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value=" " />
              <Parameter xsi:type="StringParameter" name="VariableName" value="paramInput" />
            </Statement>
            <Statement description="- derived operation" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="https://file.provaltech.com/repo/app" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="baseURL" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\provaltech\app\#projectName#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectDir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#." />
                <Parameter xsi:type="EnumParameter" name="Condition" value="NotExists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="md #projectDir#" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="#baseURL#/#projectName#.exe" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#projectDir#\#projectName#-temp.txt" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-temp.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                <Parameter xsi:type="StringParameter" name="Value" value="File or directory not found" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#.exe" />
                </Statement>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="ren &quot;#projectDir#\#projectName#-temp.txt&quot; &quot;#projectName#.exe&quot;" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement description="= operation =" name="ExecuteShellCommand" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Command" value="&quot;#projectDir#\#projectName#.exe&quot; #paramInput#" />
              <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
              <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
            </Statement>
            <If description="= data collection =">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-data.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-data.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="dataVal" />
                </Statement>
                <Statement name="UpdateSystemInfo" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL SQL Server" />
                  <Parameter xsi:type="StringParameter" name="Value" value="#dataVal#" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="data: #dataVal#" />
                </Statement>
              </Then>
            </If>
            <If description="- derived closing operation">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-errors.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-errors.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="errorVal" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="errors: #errorVal#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="- script successful" />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Hyper-V Manager Installed [CF]" treePres="3" id="1108367556" folderId="316062025966151" treeFullPath="PVAL Stack.Master Process - Global.Weekly Procedures">
          <Body description="Overview: This procedure will check if HyperV Managed is installed and update the Custom Field &quot;xPVAL Hyper-V Manager&quot;.&#xA;Requirements: none&#xA;Parameters: none">
            <Statement description="2021-01-27 Hyper-V Manager Installed" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="Hyper-VManagerInstalled" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectName" />
            </Statement>
            <If description="= operation =">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Administrative Tools\Hyper-V Manager.lnk" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="Hyper-V" />
              </Condition>
              <Then>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="Hyper-V Manager Installed" />
                </Statement>
                <Statement name="UpdateSystemInfo" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Hyper-V Manager" />
                  <Parameter xsi:type="StringParameter" name="Value" value="Installed" />
                </Statement>
              </Then>
            </If>
          </Body>
        </Procedure>
      </Folder>
      <Procedure name="- Master Control Daily Procedure -" treePres="3" id="832040145" folderId="154990201236213" treeFullPath="PVAL Stack.Master Process - Global">
        <Body description="Overview: This master procedure consolidates all daily scheduled procedures into a single schedule&#xA;This procedure has built-in OS, system type, machine name, and org name filtering blocks&#xA;Add procedures to this script as needed in the appropriate filter block&#xA;Requirements: none&#xA;Parameters: none">
          <Statement description="2020-05-15 Master Control Daily Procedure - DTurner&#xD;&#xA;= OS Detection =" name="GetVariable" continueOnFail="false" osType="Windows">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="workstation" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="10">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="workstation" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="11">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="workstation" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2022">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2019">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2016">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2012">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2008">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2003">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="MacOS">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="other" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="Linux">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="other" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="WriteScriptLogEntry" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Comment" value="- system type: #systemType#" />
          </Statement>
          <Statement description="= Script Vars =" name="GetVariable" continueOnFail="false">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="#vAgentConfiguration.machName#" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="machineName" />
          </Statement>
          <Statement name="WriteScriptLogEntry" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Comment" value="machineName: #machineName#" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="#vAuditMachineSummary.ReverseGroupName#" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="revGroupName" />
          </Statement>
          <Statement name="WriteScriptLogEntry" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Comment" value="revGroupName: #revGroupName#" />
          </Statement>
          <Statement description="= All Agent Ops =" name="WriteScriptLogEntry" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Comment" value="- running any OS procedures" />
          </Statement>
          <If description="= All Windows Ops =">
            <Condition name="CheckVariable">
              <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
              <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
              <Parameter xsi:type="StringParameter" name="Value" value="other" />
            </Condition>
            <Then>
              <Statement name="WriteScriptLogEntry" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Comment" value="- running Windows OS procedures" />
              </Statement>
              <Statement name="ExecuteScript" continueOnFail="true">
                <Parameter xsi:type="StringParameter" name="ScriptID" value="351234033" />
                <Parameter xsi:type="StringParameter" name="ScriptName" value="Get Office Version [CF]" />
                <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
                <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
              </Statement>
              <Statement name="ExecuteScript" continueOnFail="true">
                <Parameter xsi:type="StringParameter" name="ScriptID" value="1960234648" />
                <Parameter xsi:type="StringParameter" name="ScriptName" value="Get Sentinel One Status [CF]" />
                <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
                <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
              </Statement>
              <Statement name="ExecuteScript" continueOnFail="true">
                <Parameter xsi:type="StringParameter" name="ScriptID" value="2133491842" />
                <Parameter xsi:type="StringParameter" name="ScriptName" value="Get Webroot Status [CF]" />
                <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
                <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
              </Statement>
            </Then>
          </If>
          <If description="= Windows Workstation Ops =">
            <Condition name="CheckVariable">
              <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
              <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
              <Parameter xsi:type="StringParameter" name="Value" value="server" />
            </Condition>
            <Then>
              <If description="">
                <Condition name="CheckVariable">
                  <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                  <Parameter xsi:type="StringParameter" name="Value" value="other" />
                </Condition>
                <Then>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="- running Windows workstation procedures" />
                  </Statement>
                </Then>
              </If>
            </Then>
          </If>
          <If description="= Server Ops =">
            <Condition name="CheckVariable">
              <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
              <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
              <Parameter xsi:type="StringParameter" name="Value" value="server" />
            </Condition>
            <Then>
              <If description="">
                <Condition name="CheckVariable">
                  <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                  <Parameter xsi:type="StringParameter" name="Value" value="other" />
                </Condition>
                <Then>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="- running server OS procedures" />
                  </Statement>
                </Then>
              </If>
            </Then>
          </If>
          <If description="= Other OS Ops =">
            <Condition name="CheckVariable">
              <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
              <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
              <Parameter xsi:type="StringParameter" name="Value" value="other" />
            </Condition>
            <Then>
              <Statement name="WriteScriptLogEntry" continueOnFail="false" osType="MacOS">
                <Parameter xsi:type="StringParameter" name="Comment" value="- running Mac procedures" />
              </Statement>
            </Then>
          </If>
        </Body>
      </Procedure>
      <Procedure name="- Master Control Monthly Procedure -" treePres="3" id="1499494264" folderId="154990201236213" treeFullPath="PVAL Stack.Master Process - Global">
        <Body description="Overview: This master procedure consolidates all monthly scheduled procedures into a single schedule&#xA;This procedure has built-in OS, system type, machine name, and org name filtering blocks&#xA;Add procedures to this script as needed in the appropriate filter block&#xA;Requirements: none&#xA;Parameters: none">
          <Statement description="2020-05-15 Master Control Weekly Procedure - DTurner&#xD;&#xA;= OS Detection =" name="GetVariable" continueOnFail="false" osType="Windows">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="workstation" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="10">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="workstation" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="11">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="workstation" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2022">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2019">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2016">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2012">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2008">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2003">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="MacOS">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="other" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="Linux">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="other" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="WriteScriptLogEntry" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Comment" value="- system type: #systemType#" />
          </Statement>
          <Statement description="= Script Vars =" name="GetVariable" continueOnFail="false">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="#vAgentConfiguration.machName#" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="machineName" />
          </Statement>
          <Statement name="WriteScriptLogEntry" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Comment" value="machineName: #machineName#" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="#vAuditMachineSummary.ReverseGroupName#" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="revGroupName" />
          </Statement>
          <Statement name="WriteScriptLogEntry" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Comment" value="revGroupName: #revGroupName#" />
          </Statement>
          <Statement description="= All Agent Ops =" name="WriteScriptLogEntry" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Comment" value="- running any OS procedures" />
          </Statement>
          <If description="= All Windows Ops =">
            <Condition name="CheckVariable">
              <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
              <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
              <Parameter xsi:type="StringParameter" name="Value" value="other" />
            </Condition>
            <Then>
              <Statement name="WriteScriptLogEntry" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Comment" value="- running Windows OS procedures" />
              </Statement>
              <Statement name="ExecuteScript" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="ScriptID" value="1079885418" />
                <Parameter xsi:type="StringParameter" name="ScriptName" value="Change Agent Add/Remove Info [Params, File]" />
                <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
                <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
              </Statement>
              <Statement name="ExecuteScript" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="ScriptID" value="1021259410" />
                <Parameter xsi:type="StringParameter" name="ScriptName" value="Rename Agent Service [Params]" />
                <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
                <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
              </Statement>
            </Then>
          </If>
          <If description="= Windows Workstation Ops =">
            <Condition name="CheckVariable">
              <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
              <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
              <Parameter xsi:type="StringParameter" name="Value" value="server" />
            </Condition>
            <Then>
              <If description="">
                <Condition name="CheckVariable">
                  <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                  <Parameter xsi:type="StringParameter" name="Value" value="other" />
                </Condition>
                <Then>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="- running Windows workstation procedures" />
                  </Statement>
                  <Statement name="ExecuteScript" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="ScriptID" value="" />
                    <Parameter xsi:type="StringParameter" name="ScriptName" value="" />
                    <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
                    <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
                  </Statement>
                </Then>
              </If>
            </Then>
          </If>
          <If description="= Server Ops =">
            <Condition name="CheckVariable">
              <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
              <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
              <Parameter xsi:type="StringParameter" name="Value" value="server" />
            </Condition>
            <Then>
              <If description="">
                <Condition name="CheckVariable">
                  <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                  <Parameter xsi:type="StringParameter" name="Value" value="other" />
                </Condition>
                <Then>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="- running server OS procedures" />
                  </Statement>
                </Then>
              </If>
            </Then>
          </If>
          <If description="= Other OS Ops =">
            <Condition name="CheckVariable">
              <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
              <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
              <Parameter xsi:type="StringParameter" name="Value" value="other" />
            </Condition>
            <Then>
              <Statement name="WriteScriptLogEntry" continueOnFail="false" osType="MacOS">
                <Parameter xsi:type="StringParameter" name="Comment" value="- running Mac procedures" />
              </Statement>
            </Then>
          </If>
        </Body>
      </Procedure>
      <Procedure name="- Master Control Weekly Procedure -" treePres="3" id="1836850829" folderId="154990201236213" treeFullPath="PVAL Stack.Master Process - Global">
        <Body description="Overview: This master procedure consolidates all weekly scheduled procedures into a single schedule&#xA;This procedure has built-in OS, system type, machine name, and org name filtering blocks&#xA;Add procedures to this script as needed in the appropriate filter block&#xA;Requirements: none&#xA;Parameters: none">
          <Statement description="2020-05-15 Master Control Weekly Procedure - DTurner&#xD;&#xA;= OS Detection =" name="GetVariable" continueOnFail="false" osType="Windows">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="workstation" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="10">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="workstation" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="11">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="workstation" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2022">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2019">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2016">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2012">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2008">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="2003">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="server" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="MacOS">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="other" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false" osType="Linux">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="other" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="systemType" />
          </Statement>
          <Statement name="WriteScriptLogEntry" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Comment" value="- system type: #systemType#" />
          </Statement>
          <Statement description="= Script Vars =" name="GetVariable" continueOnFail="false">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="#vAgentConfiguration.machName#" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="machineName" />
          </Statement>
          <Statement name="WriteScriptLogEntry" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Comment" value="machineName: #machineName#" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="#vAuditMachineSummary.ReverseGroupName#" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="revGroupName" />
          </Statement>
          <Statement name="WriteScriptLogEntry" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Comment" value="revGroupName: #revGroupName#" />
          </Statement>
          <Statement description="= All Agent Ops =" name="WriteScriptLogEntry" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Comment" value="- running any OS procedures" />
          </Statement>
          <If description="= All Windows Ops =">
            <Condition name="CheckVariable">
              <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
              <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
              <Parameter xsi:type="StringParameter" name="Value" value="other" />
            </Condition>
            <Then>
              <Statement name="WriteScriptLogEntry" continueOnFail="true">
                <Parameter xsi:type="StringParameter" name="Comment" value="- running Windows OS procedures" />
              </Statement>
              <Statement name="ExecuteScript" continueOnFail="true">
                <Parameter xsi:type="StringParameter" name="ScriptID" value="2016576049" />
                <Parameter xsi:type="StringParameter" name="ScriptName" value="Drive List Collection" />
                <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
                <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
              </Statement>
              <Statement name="ExecuteScript" continueOnFail="true">
                <Parameter xsi:type="StringParameter" name="ScriptID" value="1218192449" />
                <Parameter xsi:type="StringParameter" name="ScriptName" value="Get PDC Status [CF]" />
                <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
                <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
              </Statement>
              <Statement name="ExecuteScript" continueOnFail="true">
                <Parameter xsi:type="StringParameter" name="ScriptID" value="1883243422" />
                <Parameter xsi:type="StringParameter" name="ScriptName" value="Get OS Install Date [CF]" />
                <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
                <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
              </Statement>
              <Statement name="ExecuteScript" continueOnFail="true">
                <Parameter xsi:type="StringParameter" name="ScriptID" value="752022898" />
                <Parameter xsi:type="StringParameter" name="ScriptName" value="Get BitLocker Status for All Drives [CF]" />
                <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
                <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
              </Statement>
            </Then>
          </If>
          <If description="= Windows Workstation Ops =">
            <Condition name="CheckVariable">
              <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
              <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
              <Parameter xsi:type="StringParameter" name="Value" value="server" />
            </Condition>
            <Then>
              <If description="">
                <Condition name="CheckVariable">
                  <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                  <Parameter xsi:type="StringParameter" name="Value" value="other" />
                </Condition>
                <Then>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="- running Windows workstation procedures" />
                  </Statement>
                </Then>
              </If>
            </Then>
          </If>
          <If description="= Server Ops =">
            <Condition name="CheckVariable">
              <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
              <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
              <Parameter xsi:type="StringParameter" name="Value" value="server" />
            </Condition>
            <Then>
              <If description="">
                <Condition name="CheckVariable">
                  <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                  <Parameter xsi:type="StringParameter" name="Value" value="other" />
                </Condition>
                <Then>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="- running server OS procedures" />
                  </Statement>
                  <Statement name="ExecuteScript" continueOnFail="true">
                    <Parameter xsi:type="StringParameter" name="ScriptID" value="513216909" />
                    <Parameter xsi:type="StringParameter" name="ScriptName" value="Get Exchange Version [CF]" />
                    <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
                    <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
                  </Statement>
                  <Statement name="ExecuteScript" continueOnFail="true">
                    <Parameter xsi:type="StringParameter" name="ScriptID" value="1930258889" />
                    <Parameter xsi:type="StringParameter" name="ScriptName" value="Get SQL Active and Version [CF]" />
                    <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
                    <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
                  </Statement>
                  <Statement name="ExecuteScript" continueOnFail="true">
                    <Parameter xsi:type="StringParameter" name="ScriptID" value="1108367556" />
                    <Parameter xsi:type="StringParameter" name="ScriptName" value="Hyper-V Manager Installed [CF]" />
                    <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
                    <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
                  </Statement>
                </Then>
              </If>
            </Then>
          </If>
          <If description="= Other OS Ops =">
            <Condition name="CheckVariable">
              <Parameter xsi:type="StringParameter" name="VariableName" value="#systemType#" />
              <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
              <Parameter xsi:type="StringParameter" name="Value" value="other" />
            </Condition>
            <Then>
              <Statement name="WriteScriptLogEntry" continueOnFail="false" osType="MacOS">
                <Parameter xsi:type="StringParameter" name="Comment" value="- running Mac procedures" />
              </Statement>
            </Then>
          </If>
        </Body>
      </Procedure>
    </Folder>
    <Folder name="Policy" treePres="3">
      <Folder name="Scheduled" treePres="3">
        <Folder name="Reboot Nag" treePres="3" />
        <Procedure name="Browser History Capture" treePres="3" id="1583863039" folderId="674337985075236" treeFullPath="PVAL Stack.Policy.Scheduled">
          <Body description="Overview: Exports all browser history to csv.&#xA;Grabs the history.csv file and saves to: hover over agent &gt; get file&#xA;Requirements: none&#xA;Parameters: none">
            <Statement description="2020-08-19 BrowserHistoryCapture david.turner@provaltech.com" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="BrowserHistoryCapture" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectName" />
            </Statement>
            <Statement description="- project parameters" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="#vComputedDenormalizedOrgToMach.OrgId#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="orgGuid" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="#vAgentConfiguration.Machine_GroupID#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="machName" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\provaltech\app\#projectName#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectDir" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="/HistorySource 1 /LoadIE 1 /LoadFirefox 1 /LoadChrome 1 /LoadSafari 1 /VisitTimeFilterType 3 /VisitTimeFilterValue 60 /scomma &quot;#projectDir#\#projectName#-data.csv&quot;" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="paramInput" />
            </Statement>
            <Statement description="- derived operation" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="https://file.provaltech.com/repo/app" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="baseURL" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#." />
                <Parameter xsi:type="EnumParameter" name="Condition" value="NotExists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="md #projectDir#" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="#baseURL#/#projectName#.exe" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#projectDir#\#projectName#-temp.txt" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-temp.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                <Parameter xsi:type="StringParameter" name="Value" value="File or directory not found" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#.exe" />
                </Statement>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="ren &quot;#projectDir#\#projectName#-temp.txt&quot; &quot;#projectName#.exe&quot;" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <If description="= operation =">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-data.csv" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="true">
                  <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-data.csv" />
                </Statement>
              </Then>
            </If>
            <Statement name="ExecuteShellCommand" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Command" value="&quot;#projectDir#\#projectName#.exe&quot; #paramInput#" />
              <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
              <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
            </Statement>
            <Statement name="PauseScript" continueOnFail="true">
              <Parameter xsi:type="IntegerParameter" name="Seconds" value="30" />
            </Statement>
            <If description="= data collection =">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-data.csv" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetFile" continueOnFail="true">
                  <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#projectDir#\#projectName#-data.csv" />
                  <Parameter xsi:type="StringParameter" name="KServerFileName" value="browser_history.csv" />
                  <Parameter xsi:type="EnumParameter" name="Action" value="SaveExistingNoAlert" />
                </Statement>
              </Then>
            </If>
            <If description="- derived closing operation">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-errors.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Parameter1" value="TYPE &quot;#projectDir#\#projectName#-errors.txt&quot;" />
                  <Parameter xsi:type="StringParameter" name="Parameter2" value="False" />
                  <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="errors: #global:cmdresults#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="- script successful" />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Desktop Maintenance Reminder - VSA" treePres="3" id="499657983" folderId="674337985075236" treeFullPath="PVAL Stack.Policy.Scheduled">
          <Body description="Overview: This script is designed to run in the daytime prior to desktop Patching maintenance.  &#xA;Will send a message to a desktop end user indicating they should leave their machine on overnight.&#xA;Requirements: none&#xA;Parameters: none">
            <Statement description="2021-02-11 Maintenance Reminder" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="MaintenanceReminder" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectName" />
            </Statement>
            <Statement description="- derived operation" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\provaltech\script\#projectName#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectDir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#." />
                <Parameter xsi:type="EnumParameter" name="Condition" value="NotExists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="md #projectDir#" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement description="= operation =" name="ExecuteShellCommand" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Command" value="date /T &gt;&gt; #projectDir#\#projectName#-data.txt" />
              <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
              <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
            </Statement>
            <If description="= data collection =">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-data.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-data.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="dataVal" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="data: #dataVal#" />
                </Statement>
                <Statement name="SendMessage" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Message" value="Weekly Desktop Maintenance Tonight!  (#dataVal#)&#xA;&#xA;This notice is a reminder to please leave your computer powered on tonight.  Scheduled maintenance will be performed on your machine and it is necessary that your computer stay powered on.  You may log off your active session, but please do not power off your computer.&#xA;&#xA;If you do require that your computer is offline during this time, please ensure that your machine is powered up next week to complete the scheduled maintenance tasks.&#xA;&#xA;Thank you!" />
                  <Parameter xsi:type="BooleanParameter" name="Immediate" value="True" />
                </Statement>
              </Then>
            </If>
            <Statement name="WriteScriptLogEntry" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Comment" value="- script successful" />
            </Statement>
          </Body>
        </Procedure>
        <Procedure name="Reboot Nag 1- XX Minutes" treePres="3" id="2135586559" folderId="674337985075236" treeFullPath="PVAL Stack.Policy.Scheduled">
          <Body description="If user is logged in, ask to reboot every 120 minutes until the user allows the reboot. If user is not logged in, go ahead and reboot. This procedure calls Reboot-Nag-2-XX-Minutes to ask the user.">
            <If description="If user is logged in, ask to reboot every XX minutes until the user allows the reboot. If user is not logged in, go ahead and reboot. This procedure calls Reboot-Nag-2-XX-Minutes to ask the user.">
              <Condition name="UserIsLoggedIn">
                <Parameter xsi:type="StringParameter" name="UserName" value="" />
              </Condition>
              <Then>
                <Statement name="ExecuteScript" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="ScriptID" value="1058304290" />
                  <Parameter xsi:type="StringParameter" name="ScriptName" value="Reboot Nag 2- XX Minutes" />
                  <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
                  <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
                </Statement>
              </Then>
              <Else>
                <Statement name="Reboot" continueOnFail="false" />
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Reboot Nag 2- XX Minutes" treePres="3" id="1058304290" folderId="674337985075236" treeFullPath="PVAL Stack.Policy.Scheduled">
          <Body description="Ask user if it is OK to reboot. Prompt stays for 4320 (72 hrs) minutes and then reboots if no response. If YES, schedules the script to run again in 120 minutes.">
            <If description="Ask user if it is OK to reboot. ">
              <Condition name="UserResponseIsYes">
                <Parameter xsi:type="StringParameter" name="Message" value="+++YES:Reboot Now++++++NO:Continue Working+++New software/patching has been installed on your system and a reboot is required. Reboot Now?" />
                <Parameter xsi:type="IntegerParameter" name="Timeout" value="5760" />
              </Condition>
              <Then>
                <Statement name="Reboot" continueOnFail="false" />
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="Machine Has been Rebooted Via Nag procedure" />
                </Statement>
              </Then>
              <Else>
                <Statement name="ExecuteScript" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="ScriptID" value="2135586559" />
                  <Parameter xsi:type="StringParameter" name="ScriptName" value="Reboot Nag 1- XX Minutes" />
                  <Parameter xsi:type="StringParameter" name="TimeDelay" value="120" />
                  <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Minutes" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="Nag procedure scheduled again" />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Set High Performance on AC - NeverSleepAC" treePres="3" id="911889278" folderId="674337985075236" treeFullPath="PVAL Stack.Policy.Scheduled">
          <Body description="Overview: Set Sleep Settings for Plugged In Systems&#xA;Sets system to not go to standby if on AC power&#xA;Requirements: None&#xA;Parameters: None">
            <Statement description="2021-02-22 NeverSleepAC david.turner@provaltech.com" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="NeverSleepAC" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectName" />
            </Statement>
            <Statement description="- project parameters" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value=" " />
              <Parameter xsi:type="StringParameter" name="VariableName" value="paramInput" />
            </Statement>
            <Statement description="- derived operation" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="https://file.provaltech.com/repo/app" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="baseURL" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\provaltech\app\#projectName#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectDir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#." />
                <Parameter xsi:type="EnumParameter" name="Condition" value="NotExists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="md #projectDir#" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="#baseURL#/#projectName#.exe" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#projectDir#\#projectName#-temp.txt" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-temp.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                <Parameter xsi:type="StringParameter" name="Value" value="File or directory not found" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#.exe" />
                </Statement>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="ren &quot;#projectDir#\#projectName#-temp.txt&quot; &quot;#projectName#.exe&quot;" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement description="= operation =" name="ExecuteShellCommand" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Command" value="&quot;#projectDir#\#projectName#.exe&quot; #paramInput#" />
              <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
              <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
            </Statement>
            <If description="= data collection =">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-data.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-data.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="dataVal" />
                </Statement>
                <Statement description="updateSystemInfo(&quot;xPVAL CustomField&quot;, &quot;#dataVal#&quot;, &quot;All Operating Systems&quot;, &quot;Halt on Fail&quot; )" name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="data: #dataVal#" />
                </Statement>
              </Then>
            </If>
            <If description="- derived closing operation">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-errors.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-errors.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="errorVal" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="errors: #errorVal#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="- script successful" />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
      </Folder>
      <Folder name="Triggered" treePres="3">
        <Folder name="Alarm Suspension" treePres="3">
          <Procedure name="Suspend Alarms - 120mins" treePres="3" id="59567424" folderId="960451835980848" treeFullPath="PVAL Stack.Policy.Triggered.Alarm Suspension">
            <Body description="Overview: Suspends monitoring alarms for 120 minutes. &#xA;Requirements: none&#xA;Parameters: none">
              <Statement description="2021-01-27 Performs a 120 minute alarm suspension" name="Alarms - Suspend" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="120" />
              </Statement>
            </Body>
          </Procedure>
          <Procedure name="Suspend Alarms - 360mins" treePres="3" id="181182763" folderId="960451835980848" treeFullPath="PVAL Stack.Policy.Triggered.Alarm Suspension">
            <Body description="">
              <Statement description="2021-01-27 Performs a 360 minute alarm suspension" name="Alarms - Suspend" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="360" />
              </Statement>
            </Body>
          </Procedure>
          <Procedure name="Unsuspend Alarms" treePres="3" id="1893192230" folderId="960451835980848" treeFullPath="PVAL Stack.Policy.Triggered.Alarm Suspension">
            <Body description="Overview: Resumes monitoring and clears alarm suspensions&#xA;Requirements: none&#xA;Parameters: none">
              <Statement description="2021-01-27 Resumes monitoring and clears alarm suspensions" name="Alarms - Unsuspend All" continueOnFail="false" />
            </Body>
          </Procedure>
        </Folder>
        <Folder name="Drive Scripts" treePres="3">
          <Procedure name="Soji - Disk Cleaner" treePres="3" id="2005588381" folderId="115344173887439" treeFullPath="PVAL Stack.Policy.Triggered.Drive Scripts">
            <Body description="Overview:&#xA;This script consolidates all of our drive cleaning methods into a single universal process. By default, it will run on all internal drives but it can be targeted to a single drive using parameters.&#xA;There are two main parts: A directed file\folder deletion pass that’s based on file type and age and a controlled Windows disk cleanup (cleanmgr.exe) pass.&#xA;The file\folder deletion pass leverages a unique .NET fast iteration function that’s much more efficient than forfiles or foreach commands.&#xA;Requirements: none&#xA;Parameters:&#xA;-drive Optional. The targeted drive. If not defined then all drives are processed.">
              <Statement description=" Pre-run cleanup, Create AP Directory, and download exe (Required because Soji logs do not overwrite themselves but create an appended file. getFile won't work like this.)" name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\app" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="Dir" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="#Dir#\soji" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="soji" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="#soji#\SojiLogs" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="sojiLogs" />
              </Statement>
              <Statement name="Execute Powershell" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="Remove-Item -LiteralPath &quot;#Soji#&quot; -Force -Recurse -Erroraction SilentlyContinue" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
              </Statement>
              <Statement name="Execute Powershell" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -Type Directory -Path #soji# -Name SojiLogs -ErrorAction SilentlyContinue" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
              </Statement>
              <Statement name="GetURL" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/app/Soji.exe" />
                <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#soji#\Soji.exe" />
                <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#soji#\Soji.exe" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="NotExists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="File or directory not found" />
                </Condition>
                <Then>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="File not succesfully downloaded to endpoint." />
                  </Statement>
                </Then>
                <Else>
                  <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Parameter1" value="C:\Progra~1\dotnet\dotnet.exe --list-runtimes" />
                    <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
                    <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#global:cmdresults#" />
                  </Statement>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                      <Parameter xsi:type="StringParameter" name="Value" value="6." />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value=".NET 6 was not detected on this endpoint. Attempting Automated Installation." />
                      </Statement>
                      <Statement name="GetURL" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="URL" value="https://dotnetcli.azureedge.net/dotnet/WindowsDesktop/6.0.6/windowsdesktop-runtime-6.0.6-win-x64.exe" />
                        <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#soji#\windowsdesktop-runtime-6.0.6-win-x64.exe" />
                        <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
                      </Statement>
                      <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
                        <Parameter xsi:type="StringParameter" name="Parameter2" value="Start-Process -FilePath &quot;#soji#\windowsdesktop-runtime-6.0.6-win-x64.exe&quot; -ArgumentList &quot;/quiet&quot;,&quot;/norestart&quot; -NoNewWindow -Wait" />
                        <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
                      </Statement>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="#global:psresult#" />
                      </Statement>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value=".NET 6 install completed. Checking for successful installation:" />
                      </Statement>
                    </Then>
                    <Else>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value=".NET 6 already installed on endpoint." />
                      </Statement>
                    </Else>
                  </If>
                  <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Parameter1" value="C:\Progra~1\dotnet\dotnet.exe --list-runtimes" />
                    <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
                    <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#global:cmdresults#" />
                  </Statement>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                      <Parameter xsi:type="StringParameter" name="Value" value="6." />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value=".NET 6.0 did not successfully install." />
                      </Statement>
                    </Then>
                    <Else>
                      <Statement name="ExecuteShellCommand" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Command" value="cd #soji# &amp;&amp; &quot;#soji#\soji.exe&quot; --csv --run-cleanmgr --empty-recyclebin --clean-winsxs" />
                        <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                        <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                      </Statement>
                      <Statement name="GetVariable" continueOnFail="false">
                        <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                        <Parameter xsi:type="StringParameter" name="SourceContent" value="#sojiLogs#\soji.log" />
                        <Parameter xsi:type="StringParameter" name="VariableName" value="sojilogcontent" />
                      </Statement>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="Soji Log: #sojilogcontent#" />
                      </Statement>
                      <If description="">
                        <Condition name="TestFile">
                          <Parameter xsi:type="StringParameter" name="Path" value="#sojiLogs#\Soji-files.csv" />
                          <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                          <Parameter xsi:type="StringParameter" name="Value" value="" />
                        </Condition>
                        <Then>
                          <Statement name="GetFile" continueOnFail="true">
                            <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#sojiLogs#\Soji-files.csv" />
                            <Parameter xsi:type="StringParameter" name="KServerFileName" value="SojiLogs\Soji-files.csv" />
                            <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                          </Statement>
                        </Then>
                        <Else>
                          <Statement name="WriteScriptLogEntry" continueOnFail="false">
                            <Parameter xsi:type="StringParameter" name="Comment" value="#sojiLogs#\Soji-files.csv Does Not exist on the endpoint. Check logs for further information." />
                          </Statement>
                        </Else>
                      </If>
                      <If description="">
                        <Condition name="TestFile">
                          <Parameter xsi:type="StringParameter" name="Path" value="#sojiLogs#\Soji-directories.csv" />
                          <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                          <Parameter xsi:type="StringParameter" name="Value" value="" />
                        </Condition>
                        <Then>
                          <Statement name="GetFile" continueOnFail="true">
                            <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#sojiLogs#\Soji-directories.csv" />
                            <Parameter xsi:type="StringParameter" name="KServerFileName" value="SojiLogs\Soji-directories.csv" />
                            <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                          </Statement>
                        </Then>
                        <Else>
                          <Statement name="WriteScriptLogEntry" continueOnFail="false">
                            <Parameter xsi:type="StringParameter" name="Comment" value="#sojiLogs#\Soji-directories.csv Does Not exist on the endpoint. Check logs for further information." />
                          </Statement>
                        </Else>
                      </If>
                      <If description="">
                        <Condition name="TestFile">
                          <Parameter xsi:type="StringParameter" name="Path" value="#sojiLogs#\Soji-volumecaches.csv" />
                          <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                          <Parameter xsi:type="StringParameter" name="Value" value="" />
                        </Condition>
                        <Then>
                          <Statement name="GetFile" continueOnFail="true">
                            <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#sojiLogs#\Soji-volumecaches.csv" />
                            <Parameter xsi:type="StringParameter" name="KServerFileName" value="SojiLogs\Soji-volumecaches.csv" />
                            <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                          </Statement>
                        </Then>
                        <Else>
                          <Statement name="WriteScriptLogEntry" continueOnFail="false">
                            <Parameter xsi:type="StringParameter" name="Comment" value="#sojiLogs#\Soji-volumecaches.csv Does Not exist on the endpoint. Check logs for further information." />
                          </Statement>
                        </Else>
                      </If>
                      <If description="">
                        <Condition name="TestFile">
                          <Parameter xsi:type="StringParameter" name="Path" value="#sojiLogs#\Soji-summary.csv" />
                          <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                          <Parameter xsi:type="StringParameter" name="Value" value="" />
                        </Condition>
                        <Then>
                          <Statement name="GetFile" continueOnFail="true">
                            <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#sojiLogs#\Soji-summary.csv" />
                            <Parameter xsi:type="StringParameter" name="KServerFileName" value="SojiLogs\Soji-summary.csv" />
                            <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                          </Statement>
                        </Then>
                        <Else>
                          <Statement name="WriteScriptLogEntry" continueOnFail="false">
                            <Parameter xsi:type="StringParameter" name="Comment" value="#sojiLogs#\Soji-summary.csv Does Not exist on the endpoint. Check logs for further information." />
                          </Statement>
                        </Else>
                      </If>
                      <Statement name="Get Variable - Universal - Create" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Parameter1" value="30" />
                        <Parameter xsi:type="StringParameter" name="Parameter2" value="" />
                        <Parameter xsi:type="StringParameter" name="Parameter3" value="" />
                      </Statement>
                      <Statement name="ExecuteScript" continueOnFail="false" osType="None">
                        <Parameter xsi:type="StringParameter" name="ScriptID" value="" />
                        <Parameter xsi:type="StringParameter" name="ScriptName" value="" />
                        <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
                        <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
                      </Statement>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="Soji has completed. Logs files have been written to #projectDir#\#projectName#-&lt;type&gt;.csv and uploaded to the machine's personal store under the &quot;SojiLogs&quot; directory. Please review these reports for detailed results about the cleanup." />
                      </Statement>
                    </Else>
                  </If>
                </Else>
              </If>
            </Body>
          </Procedure>
        </Folder>
        <Folder name="Master Onboarding Process" treePres="3" />
        <Procedure name="Check Security Events for Admin Memberships" treePres="3" id="1265662678" folderId="606822187922346" treeFullPath="PVAL Stack.Policy.Triggered">
          <Body description="Overview: Runs on a DC when 4722, 4724, 4725 detected.&#xA;If an affected user in those events is a member of an admin group new events will be created:&#xA;ID 4722 Will create the event 54722 &quot;Admin User Account Was Enabled&quot;&#xA;ID 4724 Will create the event 54724 &quot;Admin User Password Reset Attempt&quot;&#xA;ID 4725 Will create the event 54725 &quot;Admin User Account Was Disabled&quot;&#xA;Requirements: DC&#xA;Parameters: none">
            <Statement description="2020-11-13 Run Local Script to Check Monitored Sec Event Logs for Admin Memberships david.turner@provaltech.com" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="EventChecker_AdminGroup" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectName" />
            </Statement>
            <Statement description="- project parameters" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value=" " />
              <Parameter xsi:type="StringParameter" name="VariableName" value="paramInput" />
            </Statement>
            <Statement description="- derived operation" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="https://file.provaltech.com/repo/app" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="baseURL" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\provaltech\app\#projectName#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectDir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#." />
                <Parameter xsi:type="EnumParameter" name="Condition" value="NotExists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="md #projectDir#" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="#baseURL#/#projectName#.exe" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#projectDir#\#projectName#-temp.txt" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-temp.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                <Parameter xsi:type="StringParameter" name="Value" value="File or directory not found" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#.exe" />
                </Statement>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="ren &quot;#projectDir#\#projectName#-temp.txt&quot; &quot;#projectName#.exe&quot;" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement description="= operation =" name="ExecuteShellCommand" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Command" value="&quot;#projectDir#\#projectName#.exe&quot; #paramInput#" />
              <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
              <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
            </Statement>
            <If description="= data collection =">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-data.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Parameter1" value="TYPE &quot;#projectDir#\#projectName#-data.txt&quot;" />
                  <Parameter xsi:type="StringParameter" name="Parameter2" value="False" />
                  <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
                </Statement>
                <Statement description="updateSystemInfo(&quot;xPVAL CustomField&quot;, &quot;#global:cmdresults#&quot;, &quot;All Operating Systems&quot;, &quot;Halt on Fail&quot; )" name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="data: #global:cmdresults#" />
                </Statement>
              </Then>
            </If>
            <If description="- derived closing operation">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-errors.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Parameter1" value="TYPE &quot;#projectDir#\#projectName#-errors.txt&quot;" />
                  <Parameter xsi:type="StringParameter" name="Parameter2" value="False" />
                  <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="errors: #global:cmdresults#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="- script successful" />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Third Party App Compliance Processor [Params, CF]" treePres="3" id="1333614620" folderId="606822187922346" treeFullPath="PVAL Stack.Policy.Triggered">
          <Body description="Overview: Chocolatey install or only upgrade deployment of 3rd party apps.&#xA;Install\Upgrades from the app list in CF's &quot;xPVAL 3rd Party Install&quot; and &quot;xPVAL 3rd Party Update&quot;&#xA;These CF's are populated by the Org CF API sync.&#xA;Requirements: Org CF API sync or manual entry of CF data. Internet connection.&#xA;Parameters:&#xA;-install Required. [yes] or [no] Install the app if it doesn't exist? [no] = upgrade only&#xA;-packages Pipe separated list of packages. If install=no use:&#xA;[&lt;pkg&gt;,&lt;displayname&gt;|&lt;pkg&gt;,&lt;displayname&gt;]&#xA;-exception Pipe separated list of library packages not to install\upgrade&#xA;-custom Pipe separated list of packages to add to library packages. If install=no use:&#xA;[&lt;pkg&gt;,&lt;displayname&gt;]">
            <Statement description="2021-02-18 ChocoController david.turner@provaltech.com" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="ChocoController" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectName" />
            </Statement>
            <Statement description="- project parameters" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="SQLView" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="vSystemInfoManual/[xPVAL 3rd Party Install]" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="installValue" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="SQLView" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="vSystemInfoManual/[xPVAL 3rd Party Update]" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="updateValue" />
            </Statement>
            <Statement description="- derived operation" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="https://file.provaltech.com/repo/app" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="baseURL" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\provaltech\app\#projectName#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectDir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#." />
                <Parameter xsi:type="EnumParameter" name="Condition" value="NotExists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="md #projectDir#" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="#baseURL#/#projectName#.exe" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#projectDir#\#projectName#-temp.txt" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-temp.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                <Parameter xsi:type="StringParameter" name="Value" value="File or directory not found" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#.exe" />
                </Statement>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="ren &quot;#projectDir#\#projectName#-temp.txt&quot; &quot;#projectName#.exe&quot;" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <If description="= operation =">
              <Condition name="CheckVariable">
                <Parameter xsi:type="StringParameter" name="VariableName" value="installValue" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                <Parameter xsi:type="StringParameter" name="Value" value="None" />
              </Condition>
              <Then>
                <If description="">
                  <Condition name="CheckVariable">
                    <Parameter xsi:type="StringParameter" name="VariableName" value="installValue" />
                    <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                    <Parameter xsi:type="StringParameter" name="Value" value="none" />
                  </Condition>
                  <Then>
                    <Statement name="ExecuteShellCommand" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="Command" value="&quot;#projectDir#\#projectName#.exe&quot; -install yes -packages &quot;#installValue#&quot;" />
                      <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                      <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                    </Statement>
                  </Then>
                </If>
              </Then>
            </If>
            <If description="">
              <Condition name="CheckVariable">
                <Parameter xsi:type="StringParameter" name="VariableName" value="updateValue" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                <Parameter xsi:type="StringParameter" name="Value" value="None" />
              </Condition>
              <Then>
                <If description="">
                  <Condition name="CheckVariable">
                    <Parameter xsi:type="StringParameter" name="VariableName" value="updateValue" />
                    <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                    <Parameter xsi:type="StringParameter" name="Value" value="none" />
                  </Condition>
                  <Then>
                    <If description="">
                      <Condition name="CheckVariable">
                        <Parameter xsi:type="StringParameter" name="VariableName" value="updateValue" />
                        <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                        <Parameter xsi:type="StringParameter" name="Value" value="," />
                      </Condition>
                      <Then>
                        <Statement name="ExecuteShellCommand" continueOnFail="false">
                          <Parameter xsi:type="StringParameter" name="Command" value="&quot;#projectDir#\#projectName#.exe&quot; -install no -packages &quot;#updateValue#&quot;" />
                          <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                          <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                        </Statement>
                      </Then>
                    </If>
                  </Then>
                </If>
              </Then>
            </If>
            <If description="= data collection =">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-data.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-data.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="dataVal" />
                </Statement>
                <Statement description="updateSystemInfo(&quot;xPVAL CustomField&quot;, &quot;#dataVal#&quot;, &quot;All Operating Systems&quot;, &quot;Halt on Fail&quot; )" name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="data: #dataVal#" />
                </Statement>
              </Then>
            </If>
            <If description="- derived closing operation">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-errors.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-errors.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="errorVal" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="errors: #errorVal#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="- script successful" />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
      </Folder>
    </Folder>
    <Folder name="Tool Set - Global" treePres="3">
      <Folder name="Data Collection" treePres="3">
        <Procedure name="Collate Browser Extension Results and Send [Params, Email]" treePres="3" id="900446849" folderId="311348010511765" treeFullPath="PVAL Stack.Tool Set - Global.Data Collection">
          <Body description="Overview: This script collates all CSV's pulled in from the browser extension report and sends it to the target email.&#xA;Requirements: Needs the browser extension report script before being run&#xA;Parameters:&#xA;-filepart Required. The individual report file names&#xA;-msgto Required. The target email address&#xA;-msgsubject Required. The email subject line&#xA;-msgattach Required. The email attachment file name">
            <Statement description="2021-02-19 VSAReportCollator david.turner@provaltech.com" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="VSAReportCollator" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectName" />
            </Statement>
            <Statement description="- project parameters" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="system-browser-extensions.csv" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="filepart" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="david.turner@provaltech.com" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="msgto" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="Browser Extension Report" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="msgsubject" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="browser-extension-report.csv" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="msgattach" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value=" -filepart #filepart# -msgto #msgto# -msgsubject &quot;#msgsubject#&quot; -msgattach #msgattach#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="paramInput" />
            </Statement>
            <Statement description="- derived operation" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="https://file.provaltech.com/repo/app" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="baseURL" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\provaltech\app\#projectName#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectDir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#." />
                <Parameter xsi:type="EnumParameter" name="Condition" value="NotExists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="md #projectDir#" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="#baseURL#/#projectName#.exe" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#projectDir#\#projectName#-temp.txt" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-temp.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                <Parameter xsi:type="StringParameter" name="Value" value="File or directory not found" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#.exe" />
                </Statement>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="ren &quot;#projectDir#\#projectName#-temp.txt&quot; &quot;#projectName#.exe&quot;" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement description="= operation =" name="ExecuteShellCommand" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Command" value="&quot;#projectDir#\#projectName#.exe&quot; #paramInput#" />
              <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
              <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
            </Statement>
            <If description="= data collection =">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-data.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-data.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="dataVal" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="data: #dataVal#" />
                </Statement>
              </Then>
            </If>
            <If description="- derived closing operation">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-errors.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-errors.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="errorVal" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="errors: #errorVal#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="- script successful" />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Get Browser Extension Data to CSV" treePres="3" id="1162760572" folderId="311348010511765" treeFullPath="PVAL Stack.Tool Set - Global.Data Collection">
          <Body description="Overview: This script parses the per user Chrome and Edge JSON files and generates a CSV of all installed extensions.&#xA;It uploads the CSV to VSA via GetFile. The CSV’s are setup to allow another script to collate them together if needed.&#xA;Requirements: None&#xA;Parameters: None">
            <Statement description="2021-01-27 GetBrowserExtensions david.turner@provaltech.com" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="GetBrowserExtensions" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectName" />
            </Statement>
            <Statement description="- project parameters" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value=" " />
              <Parameter xsi:type="StringParameter" name="VariableName" value="paramInput" />
            </Statement>
            <Statement description="- derived operation" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="https://file.provaltech.com/repo/app" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="baseURL" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\provaltech\app\#projectName#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectDir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#." />
                <Parameter xsi:type="EnumParameter" name="Condition" value="NotExists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="md #projectDir#" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="#baseURL#/#projectName#.exe" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#projectDir#\#projectName#-temp.txt" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-temp.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                <Parameter xsi:type="StringParameter" name="Value" value="File or directory not found" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#.exe" />
                </Statement>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="ren &quot;#projectDir#\#projectName#-temp.txt&quot; &quot;#projectName#.exe&quot;" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement description="= operation =" name="ExecuteShellCommand" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Command" value="#projectDir#\#projectName#.exe #paramInput#" />
              <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
              <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\system-browser-extensions.csv" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="- local csv collation result exists" />
                </Statement>
                <Statement name="GetFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#projectDir#\system-browser-extensions.csv" />
                  <Parameter xsi:type="StringParameter" name="KServerFileName" value="system-browser-extensions.csv" />
                  <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="- no local csv collation results" />
                </Statement>
              </Else>
            </If>
            <If description="- derived closing operation">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-errors.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-errors.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="errorVal" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="errors: #errorVal#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="- script successful" />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="HDD Info Retrieval" treePres="3" id="95770597" folderId="311348010511765" treeFullPath="PVAL Stack.Tool Set - Global.Data Collection">
          <Body description="">
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="%ProgramData%\_automation\StackContent\DriveReporting\DriveReport.csv" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="%ProgramData%\_automation\StackContent\DriveReporting\DriveReport.csv" />
                </Statement>
              </Then>
            </If>
            <Statement name="Execute Powershell" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -Type Directory -Path %ProgramData%\_automation\StackContent -Name DriveReporting -Force -ErrorAction SilentlyContinue" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
            </Statement>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Get-DiskInfo.ps1" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="%ProgramData%\_automation\StackContent\DriveReporting\Get-DiskInfo.ps1" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="$driveInfo =  %ProgramData%\_automation\StackContent\DriveReporting\Get-DiskInfo.ps1; $driveinfo.DiskDrive | Select-Object FriendlyName, Model, SerialNumber, BusType, MediaType, HealthStatus, Size | Export-Csv -Path %ProgramData%\_automation\StackContent\DriveReporting\DriveReport.csv -NoTypeInformation" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="%ProgramData%\_automation\StackContent\DriveReporting\DriveReport.csv" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="RemoteFileName" value="%ProgramData%\_automation\StackContent\DriveReporting\DriveReport.csv" />
                  <Parameter xsi:type="StringParameter" name="KServerFileName" value="StackLogs\DriveReport.csv" />
                  <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="Drive Reporting Complete. See GetLogs\StackLogs\DriveReport.csv for details." />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="Log not found on endpoint." />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
      </Folder>
      <Folder name="Maintenance" treePres="3">
        <Folder name="System Restore" treePres="3">
          <Procedure name="System Restore 2 GB" treePres="3" id="385313448" folderId="358593857921005" treeFullPath="PVAL Stack.Tool Set - Global.Maintenance.System Restore">
            <Body description="">
              <Statement name="ExecuteScript" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="ScriptID" value="1687388019" />
                <Parameter xsi:type="StringParameter" name="ScriptName" value="System Restore WKSTN" />
                <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
                <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
              </Statement>
              <Statement name="ExecuteShellCommand" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Command" value="vssadmin resize shadowstorage /on=C: /for=C: /maxsize=2GB" />
                <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="True" />
              </Statement>
            </Body>
          </Procedure>
          <Procedure name="System Restore WKSTN" treePres="3" id="1687388019" folderId="358593857921005" treeFullPath="PVAL Stack.Tool Set - Global.Maintenance.System Restore">
            <Body description="">
              <Statement name="DeleteFile" continueOnFail="true">
                <Parameter xsi:type="StringParameter" name="Path" value="#dir#\systemrestorewkstn.ps1" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="AgentTempDirectory" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
              </Statement>
              <Statement name="WriteFile" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Path" value="#dir#\systemrestorewkstn.ps1" />
                <Parameter xsi:type="StringParameter" name="ManagedFile" value="VSASharedFiles\PVAL\systemrestorewkstn.ps1" />
                <Parameter xsi:type="BooleanParameter" name="DeleteAfter" value="False" />
              </Statement>
              <Statement name="ExecuteShellCommand" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Command" value="C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -ExecutionPolicy Bypass -Command &quot;&amp; #dir#\systemrestorewkstn.ps1&quot;" />
                <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
              </Statement>
            </Body>
          </Procedure>
        </Folder>
        <Folder name="Windows 10 Upgrade 21H1 - Custom" treePres="3">
          <Procedure name="Disable First Logon Animation in Windows 10" treePres="3" id="71464615" folderId="258630269374067" treeFullPath="PVAL Stack.Tool Set - Global.Maintenance.Windows 10 Upgrade 21H1 - Custom">
            <Body description="">
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\EnableFirstLogonAnimation" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="RegPath" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="0" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="RegValue" />
              </Statement>
              <If description="">
                <Condition name="Windows 32 or 64 Bit Check">
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                </Condition>
                <Then>
                  <Statement name="SetRegistryValue64" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RegistryPath" value="#RegPath#" />
                    <Parameter xsi:type="StringParameter" name="Value" value="#RegValue#" />
                    <Parameter xsi:type="EnumParameter" name="DataType" value="Integer" />
                  </Statement>
                </Then>
                <Else>
                  <Statement name="SetRegistryValue" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RegistryPath" value="#RegPath#" />
                    <Parameter xsi:type="StringParameter" name="Value" value="#RegValue#" />
                    <Parameter xsi:type="EnumParameter" name="DataType" value="Integer" />
                  </Statement>
                </Else>
              </If>
              <If description="">
                <Condition name="CheckRegistryValue">
                  <Parameter xsi:type="StringParameter" name="RegistryPath" value="#RegPath#" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="The registry value #RegPath# has been created." />
                  </Statement>
                </Then>
                <Else>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="The registry could not be created." />
                  </Statement>
                </Else>
              </If>
            </Body>
          </Procedure>
          <Procedure name="OSBuildNumber" treePres="3" id="1179177406" folderId="258630269374067" treeFullPath="PVAL Stack.Tool Set - Global.Maintenance.Windows 10 Upgrade 21H1 - Custom">
            <Body description="">
              <Statement description="- get OS" name="GetVariable" continueOnFail="false" osType="Windows">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="#vAuditMachineSummary.OperatingSystem#" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="osShort" />
              </Statement>
              <Statement name="WriteScriptLogEntry" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Comment" value="#osShort#" />
              </Statement>
              <If description="">
                <Condition name="CheckVariable">
                  <Parameter xsi:type="StringParameter" name="VariableName" value="#osShort#" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                  <Parameter xsi:type="StringParameter" name="Value" value="Windows 10" />
                </Condition>
                <Then>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="- system is Win10" />
                  </Statement>
                  <Statement name="GetVariable" continueOnFail="false" osType="Windows">
                    <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                    <Parameter xsi:type="StringParameter" name="SourceContent" value="#vAuditMachineSummary.OSInformation#" />
                    <Parameter xsi:type="StringParameter" name="VariableName" value="osLong" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#osLong#" />
                  </Statement>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="#osLong#" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                      <Parameter xsi:type="StringParameter" name="Value" value="10240" />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="- build: 1507" />
                      </Statement>
                      <Statement name="UpdateSystemInfo" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL OS Build" />
                        <Parameter xsi:type="StringParameter" name="Value" value="1507" />
                      </Statement>
                    </Then>
                  </If>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="#osLong#" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                      <Parameter xsi:type="StringParameter" name="Value" value="10586" />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="- build: 1511" />
                      </Statement>
                      <Statement name="UpdateSystemInfo" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL OS Build" />
                        <Parameter xsi:type="StringParameter" name="Value" value="1511" />
                      </Statement>
                    </Then>
                  </If>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="#osLong#" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                      <Parameter xsi:type="StringParameter" name="Value" value="14393" />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="- build: 1607" />
                      </Statement>
                      <Statement name="UpdateSystemInfo" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL OS Build" />
                        <Parameter xsi:type="StringParameter" name="Value" value="1607" />
                      </Statement>
                    </Then>
                  </If>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="#osLong#" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                      <Parameter xsi:type="StringParameter" name="Value" value="15063" />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="- build: 1703" />
                      </Statement>
                      <Statement name="UpdateSystemInfo" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL OS Build" />
                        <Parameter xsi:type="StringParameter" name="Value" value="1703" />
                      </Statement>
                    </Then>
                  </If>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="#osLong#" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                      <Parameter xsi:type="StringParameter" name="Value" value="16299" />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="- build: 1709" />
                      </Statement>
                      <Statement name="UpdateSystemInfo" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL OS Build" />
                        <Parameter xsi:type="StringParameter" name="Value" value="1709" />
                      </Statement>
                    </Then>
                  </If>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="#osLong#" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                      <Parameter xsi:type="StringParameter" name="Value" value="17134" />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="- build: 1803" />
                      </Statement>
                      <Statement name="UpdateSystemInfo" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL OS Build" />
                        <Parameter xsi:type="StringParameter" name="Value" value="1803" />
                      </Statement>
                    </Then>
                  </If>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="#osLong#" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                      <Parameter xsi:type="StringParameter" name="Value" value="17763" />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="- build: 1809" />
                      </Statement>
                      <Statement name="UpdateSystemInfo" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL OS Build" />
                        <Parameter xsi:type="StringParameter" name="Value" value="1809" />
                      </Statement>
                    </Then>
                  </If>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="#osLong#" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                      <Parameter xsi:type="StringParameter" name="Value" value="18362" />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="- build: 1903" />
                      </Statement>
                      <Statement name="UpdateSystemInfo" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL OS Build" />
                        <Parameter xsi:type="StringParameter" name="Value" value="1903" />
                      </Statement>
                    </Then>
                  </If>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="#osLong#" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                      <Parameter xsi:type="StringParameter" name="Value" value="18363" />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="- build: 1909" />
                      </Statement>
                      <Statement name="UpdateSystemInfo" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL OS Build" />
                        <Parameter xsi:type="StringParameter" name="Value" value="1909" />
                      </Statement>
                    </Then>
                  </If>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="#osLong#" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                      <Parameter xsi:type="StringParameter" name="Value" value="19041" />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="- build: 2004" />
                      </Statement>
                      <Statement name="UpdateSystemInfo" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL OS Build" />
                        <Parameter xsi:type="StringParameter" name="Value" value="2004" />
                      </Statement>
                    </Then>
                  </If>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="#osLong#" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                      <Parameter xsi:type="StringParameter" name="Value" value="19042" />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="- build: 20H2" />
                      </Statement>
                      <Statement name="UpdateSystemInfo" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL OS Build" />
                        <Parameter xsi:type="StringParameter" name="Value" value="20H2" />
                      </Statement>
                    </Then>
                  </If>
                </Then>
                <Else>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="- not a Win10 system" />
                  </Statement>
                </Else>
              </If>
            </Body>
          </Procedure>
          <Procedure name="Windows 10 Upgrade - 21H1 (Using Assistant)" treePres="3" id="439251702" folderId="258630269374067" treeFullPath="PVAL Stack.Tool Set - Global.Maintenance.Windows 10 Upgrade 21H1 - Custom">
            <Body description="">
              <Statement name="GetURL" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="URL" value="https://go.microsoft.com/fwlink/?LinkID=799445" />
                <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#vAgentConfiguration.agentTempDir#\Windows10Upgrade9252.exe" />
                <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
              </Statement>
              <Statement name="ExecuteShellCommand" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Command" value="#vAgentConfiguration.agentTempDir#\Windows10Upgrade9252.exe /quietinstall /skipeula /auto upgrade /copylogs #vAgentConfiguration.agentTempDir#\logs" />
                <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
              </Statement>
              <Statement name="ScheduleScript" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="ScriptName" value="71464615" />
                <Parameter xsi:type="StringParameter" name="TimeDelay" value="180" />
                <Parameter xsi:type="StringParameter" name="MachineID" value="" />
              </Statement>
              <Statement name="ScheduleScript" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="ScriptName" value="1973209476" />
                <Parameter xsi:type="StringParameter" name="TimeDelay" value="180" />
                <Parameter xsi:type="StringParameter" name="MachineID" value="" />
              </Statement>
              <Statement name="ScheduleScript" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="ScriptName" value="1240206560" />
                <Parameter xsi:type="StringParameter" name="TimeDelay" value="180" />
                <Parameter xsi:type="StringParameter" name="MachineID" value="" />
              </Statement>
              <Statement name="ScheduleScript" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="ScriptName" value="1179177406" />
                <Parameter xsi:type="StringParameter" name="TimeDelay" value="180" />
                <Parameter xsi:type="StringParameter" name="MachineID" value="" />
              </Statement>
            </Body>
          </Procedure>
          <Procedure name="Windows 10 Upgrade Results" treePres="3" id="1973209476" folderId="258630269374067" treeFullPath="PVAL Stack.Tool Set - Global.Maintenance.Windows 10 Upgrade 21H1 - Custom">
            <Body description="">
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="MachineGroupID" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="MAC" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="AgentTempDirectory" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
              </Statement>
              <Statement name="WriteFile" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Path" value="#vAgentConfiguration.agentTempSecureDir#/error.ps1" />
                <Parameter xsi:type="StringParameter" name="ManagedFile" value="VSASharedFiles\PVAL\error.ps1" />
                <Parameter xsi:type="BooleanParameter" name="DeleteAfter" value="False" />
              </Statement>
              <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="powershell.exe -ExecutionPolicy Bypass -Command &quot;&amp; #dir#\error.ps1&quot;" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
              </Statement>
              <Statement name="WriteScriptLogEntry" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Comment" value="#global:cmdresults#" />
              </Statement>
              <Statement name="UpdateSystemInfo" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Windows 10 Build Result" />
                <Parameter xsi:type="StringParameter" name="Value" value="#global:cmdresults#" />
              </Statement>
            </Body>
          </Procedure>
          <Procedure name="Windows Upgrade Cleanup" treePres="3" id="1240206560" folderId="258630269374067" treeFullPath="PVAL Stack.Tool Set - Global.Maintenance.Windows 10 Upgrade 21H1 - Custom">
            <Body description="">
              <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="powershell.exe &quot;Remove-Item -Path '#vAgentConfiguration.agentTempDir#\Win10' -Recurse -Force -verbose&quot;" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
              </Statement>
              <Statement name="WriteScriptLogEntry" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Comment" value="#global:cmdresults#" />
              </Statement>
              <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="rmdir /Q /S &quot;#vAgentConfiguration.agentTempDir#\Win10&quot;" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
              </Statement>
              <Statement name="WriteScriptLogEntry" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Comment" value="#global:cmdresults#" />
              </Statement>
            </Body>
          </Procedure>
        </Folder>
        <Procedure name="Huntress Agent Deployment" treePres="3" id="2064024727" folderId="544009637573738" treeFullPath="PVAL Stack.Tool Set - Global.Maintenance">
          <Body description="">
            <If description="Huntress Agent Deployment Procedure&#xD;&#xA;18 February 2018 (v1.1)&#xD;&#xA;by John Ferrell, Huntress Labs&#xD;&#xA;Before running this procedure define a HUNTRESS_ACCT_KEY variable&#xD;&#xA;set the HUNTRESS_ACCT_KEY variable to your Huntress account key&#xD;&#xA;Your Huntress account key can be found in Huntress console&#xD;&#xA;The procedure will use the Kaseya GroupName as the Huntress organization key (used to group agents)">
              <Condition name="CheckVariable">
                <Parameter xsi:type="StringParameter" name="VariableName" value="&lt;HUNTRESS_ACCT_KEY&gt;" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="NotEquals" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <If description="">
                  <Condition name="TestRegistryKey">
                    <Parameter xsi:type="StringParameter" name="Path" value="HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\HuntressAgent" />
                    <Parameter xsi:type="EnumParameter" name="Condition" value="NotExists" />
                  </Condition>
                  <Then>
                    <Statement name="WriteScriptLogEntry" continueOnFail="false" osType="Windows">
                      <Parameter xsi:type="StringParameter" name="Comment" value="HuntressAgent service not found, installing..." />
                    </Statement>
                    <Statement name="GetURL" continueOnFail="false" osType="Windows">
                      <Parameter xsi:type="StringParameter" name="URL" value="https://update.huntress.io/download/&lt;HUNTRESS_ACCT_KEY&gt;/HuntressInstaller.exe&quot;" />
                      <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#vagentconfiguration.agenttempdir#\HuntressInstaller.exe" />
                      <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
                    </Statement>
                    <If description="">
                      <Condition name="TestFile">
                        <Parameter xsi:type="StringParameter" name="Path" value="#vagentconfiguration.agenttempdir#\HuntressInstaller.exe" />
                        <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                        <Parameter xsi:type="StringParameter" name="Value" value="" />
                      </Condition>
                      <Then>
                        <Statement name="WriteScriptLogEntry" continueOnFail="false" osType="Windows">
                          <Parameter xsi:type="StringParameter" name="Comment" value="HuntressInstaller.exe written to disk" />
                        </Statement>
                        <Statement name="WriteScriptLogEntry" continueOnFail="false" osType="Windows">
                          <Parameter xsi:type="StringParameter" name="Comment" value="Running: &quot;#vagentconfiguration.agenttempdir#\HuntressInstaller.exe&quot; /ACCT_KEY=KEY /ORG_KEY=&quot;#vAgentConfiguration.groupName#&quot; /S" />
                        </Statement>
                        <If description="">
                          <Condition name="TestFile">
                            <Parameter xsi:type="StringParameter" name="Path" value="#vagentconfiguration.agenttempdir#\HuntressInstaller.exe" />
                            <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                            <Parameter xsi:type="StringParameter" name="Value" value="" />
                          </Condition>
                          <Then>
                            <Statement name="ExecuteFile" continueOnFail="false">
                              <Parameter xsi:type="StringParameter" name="Path" value="#vagentconfiguration.agenttempdir#\HuntressInstaller.exe" />
                              <Parameter xsi:type="StringParameter" name="Arguments" value="/ACCT_KEY=&lt;HUNTRESS_ACCT_KEY&gt; /ORG_KEY=&quot;#vAgentConfiguration.groupName#&quot; /S" />
                              <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
                            </Statement>
                            <Statement name="WriteScriptLogEntry" continueOnFail="false" osType="Windows">
                              <Parameter xsi:type="StringParameter" name="Comment" value="Installation complete, verifying..." />
                            </Statement>
                            <If description="">
                              <Condition name="TestRegistryKey">
                                <Parameter xsi:type="StringParameter" name="Path" value="HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\HuntressAgent" />
                                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                              </Condition>
                              <Then>
                                <Statement name="WriteScriptLogEntry" continueOnFail="false" osType="Windows">
                                  <Parameter xsi:type="StringParameter" name="Comment" value="Huntress agent installed successfully!" />
                                </Statement>
                              </Then>
                              <Else>
                                <Statement name="WriteScriptLogEntry" continueOnFail="false" osType="Windows">
                                  <Parameter xsi:type="StringParameter" name="Comment" value="Error: Install completed but unable to detect presence of HuntressAgent service." />
                                </Statement>
                              </Else>
                            </If>
                          </Then>
                          <Else>
                            <Statement name="WriteScriptLogEntry" continueOnFail="false" osType="Windows">
                              <Parameter xsi:type="StringParameter" name="Comment" value="Error: &quot;#vagentconfiguration.agenttempdir#\HuntressInstaller.exe&quot; did not exist" />
                            </Statement>
                          </Else>
                        </If>
                      </Then>
                      <Else>
                        <Statement name="WriteScriptLogEntry" continueOnFail="false" osType="Windows">
                          <Parameter xsi:type="StringParameter" name="Comment" value="Error: Unable to download HuntressInstaller.exe" />
                        </Statement>
                      </Else>
                    </If>
                  </Then>
                  <Else>
                    <Statement name="ExecuteShellCommand" continueOnFail="true">
                      <Parameter xsi:type="StringParameter" name="Command" value="sc start HuntressUpdater" />
                      <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                      <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                    </Statement>
                    <Statement name="ExecuteShellCommand" continueOnFail="true">
                      <Parameter xsi:type="StringParameter" name="Command" value="sc start HuntressAgent" />
                      <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                      <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                    </Statement>
                    <Statement name="WriteScriptLogEntry" continueOnFail="false" osType="Windows">
                      <Parameter xsi:type="StringParameter" name="Comment" value="The Huntress agent is already installed." />
                    </Statement>
                  </Else>
                </If>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false" osType="Windows">
                  <Parameter xsi:type="StringParameter" name="Comment" value="Error: HUNTRESS_ACCT_KEY variable not defined!" />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
      </Folder>
      <Folder name="Remote Domain Join" treePres="3">
        <Folder name="Called Procedures" treePres="3">
          <Procedure name="Remote Domain Join - DC [Params]" treePres="3" id="1420554654" folderId="377772247920638" treeFullPath="PVAL Stack.Tool Set - Global.Remote Domain Join.Called Procedures">
            <Body description="Overview: Called by: Remote Domain Join - Endpoint [Reboot, Params]&#xA;Created the DJOIN payload file and transfers it to kserver for the API to retrieve&#xA;Requirements: Needs to run on a DC. Called by API. Do not run manually.&#xA;Parameters:&#xA;agentguid: This is an agent guid you need to push to the script&#xA;url: The URL for our api connection&#xA;password: The password for api our connection&#xA;username: The username for api our connection">
              <Statement description="2021-03-26 RemoteADJoin michael.schaller@provaltech.com, david.turner@provaltech.com&#xD;&#xA;- this procedure is called by API and runs on the DC. Do not run manually" name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="RemoteADJoin-CreateDJOINFileAPI" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="projectName" />
              </Statement>
              <Statement description="- project parameters" name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="#vAuditMachineSummary.agentGuid#" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="agentguid" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="https://vsa.provaltech.com" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="url" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="apiservice" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="username" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="H@l9545789329747894576" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="password" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="-agentguid #agentguid# -url #url# -password #password# -username #username#" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="paramInput" />
              </Statement>
              <Statement description="- derived operation" name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="https://file.provaltech.com/repo/app" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="baseURL" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\provaltech\app\#projectName#" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="projectDir" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#." />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="NotExists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="ExecuteShellCommand" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Command" value="md #projectDir#" />
                    <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                    <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                  </Statement>
                </Then>
              </If>
              <Statement name="GetURL" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="URL" value="#baseURL#/#projectName#.exe" />
                <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#projectDir#\#projectName#-temp.txt" />
                <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-temp.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                  <Parameter xsi:type="StringParameter" name="Value" value="File or directory not found" />
                </Condition>
                <Then>
                  <Statement name="DeleteFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#.exe" />
                  </Statement>
                  <Statement name="ExecuteShellCommand" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Command" value="ren &quot;#projectDir#\#projectName#-temp.txt&quot; &quot;#projectName#.exe&quot;" />
                    <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                    <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                  </Statement>
                </Then>
              </If>
              <Statement description="= operation =" name="ExecuteShellCommand" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Command" value="&quot;#projectDir#\#projectName#.exe&quot; #paramInput#" />
                <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
              </Statement>
              <If description="= data collection =">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-data.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="GetVariable" continueOnFail="false">
                    <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                    <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-data.txt" />
                    <Parameter xsi:type="StringParameter" name="VariableName" value="dataVal" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="data: #dataVal#" />
                  </Statement>
                </Then>
              </If>
              <If description="- derived closing operation">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-errors.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="GetVariable" continueOnFail="false">
                    <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                    <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-errors.txt" />
                    <Parameter xsi:type="StringParameter" name="VariableName" value="errorVal" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="errors: #errorVal#" />
                  </Statement>
                </Then>
                <Else>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="- script successful" />
                  </Statement>
                </Else>
              </If>
            </Body>
          </Procedure>
        </Folder>
        <Procedure name="Remote Domain Join - Endpoint [Reboot, Params]" treePres="3" id="1952273000" folderId="773036764968669" treeFullPath="PVAL Stack.Tool Set - Global.Remote Domain Join">
          <Body description="Overview: Remotely domain joins an endpoint to the most prevelant domain in the endpoint's org.&#xA;Leverages the API to etermine the DC, run the DJOIN on said DC, then get resulting file back to the endpoint.&#xA;This process can also rename the endpoint as specified in the params. This will reboot the endpoint.&#xA;Requirements: Target endpoint needs to be in the correct Kaseya org.&#xA;Parameters:&#xA;agentguid: This is an agent guid you need to push to the script&#xA;url: The URL for our api connection&#xA;password: The password for api our connection&#xA;username: The username for api our connection&#xA;renametype: Set to SERIAL for Serial, Set to COMPUTERNAME for computer name">
            <Statement description="2021-03-26 RemoteADJoin michael.schaller@provaltech.com, david.turner@provaltech.com&#xD;&#xA;- run this procedure on the target endpoint" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="RemoteADJoin-GetDCKaseyaNameAPI" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectName" />
            </Statement>
            <Statement description="- project parameters" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="#vAuditMachineSummary.agentGuid#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="agentguid" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="https://vsa.provaltech.com" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="url" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="apiservice" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="username" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="H@l9545789329747894576" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="password" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="SERIAL" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="renametype" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="-agentguid #agentguid# -url #url# -password #password# -username #username# -renametype #renametype#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="paramInput" />
            </Statement>
            <Statement description="- derived operation" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="https://file.provaltech.com/repo/app" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="baseURL" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\provaltech\app\#projectName#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="projectDir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#." />
                <Parameter xsi:type="EnumParameter" name="Condition" value="NotExists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="md #projectDir#" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="#baseURL#/#projectName#.exe" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#projectDir#\#projectName#-temp.txt" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-temp.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="DoesNotContain" />
                <Parameter xsi:type="StringParameter" name="Value" value="File or directory not found" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#.exe" />
                </Statement>
                <Statement name="ExecuteShellCommand" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Command" value="ren &quot;#projectDir#\#projectName#-temp.txt&quot; &quot;#projectName#.exe&quot;" />
                  <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                  <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                </Statement>
              </Then>
            </If>
            <Statement description="= operation =" name="ExecuteShellCommand" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Command" value="&quot;#projectDir#\#projectName#.exe&quot; #paramInput#" />
              <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
              <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
            </Statement>
            <If description="= data collection =">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-data.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-data.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="dataVal" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="data: #dataVal#" />
                </Statement>
              </Then>
            </If>
            <If description="- derived closing operation">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#projectDir#\#projectName#-errors.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#projectDir#\#projectName#-errors.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="errorVal" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="errors: #errorVal#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="- script successful" />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
      </Folder>
      <Folder name="Software" treePres="3">
        <Folder name="Software Install" treePres="3">
          <Procedure name="Chocolatey Software Install" treePres="3" id="805498722" folderId="160714101074596" treeFullPath="PVAL Stack.Tool Set - Global.Software.Software Install">
            <Body description="">
              <Statement description="Change the line below to reflect the software being installed by ChocoController&#xD;&#xA;Syntax is app1|app2|app3&#xD;&#xA;Chocolatey Package names can be found at https://community.chocolatey.org/packages" name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="googlechrome|adobereader" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="packages" />
              </Statement>
              <Statement description="If you only want to update existing installations, and not install the software where currently does not exist, the below value should be set to 1. &#xD;&#xA;If you want to install the software on endpoints where it is not currently installed, the below value should be set to 0" name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="0" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="UpdateOnly" />
              </Statement>
              <Statement description="================== DO NOT MODIFY ===================== //" name="Execute Powershell" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -Type Directory -Path %ProgramData%\_automation\AgentProcedure -Name ChocoInstall -ErrorAction SilentlyContinue" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\AgentProcedure\ChocoInstall" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\ChocoController-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="DeleteFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Path" value="#dir#\ChocoController-log.txt" />
                  </Statement>
                </Then>
              </If>
              <Statement name="GetURL" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/app/chococontroller.exe" />
                <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#dir#\ChocoController.exe" />
                <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
              </Statement>
              <If description="">
                <Condition name="CheckVariable">
                  <Parameter xsi:type="StringParameter" name="VariableName" value="#UpdateOnly#" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Equals" />
                  <Parameter xsi:type="StringParameter" name="Value" value="0" />
                </Condition>
                <Then>
                  <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Parameter1" value="cd #dir# &amp;&amp; #dir#\ChocoController.exe -install yes -packages &quot;#packages#&quot;" />
                    <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
                    <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
                  </Statement>
                </Then>
              </If>
              <If description="">
                <Condition name="CheckVariable">
                  <Parameter xsi:type="StringParameter" name="VariableName" value="#UpdateOnly#" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Equals" />
                  <Parameter xsi:type="StringParameter" name="Value" value="1" />
                </Condition>
                <Then>
                  <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Parameter1" value="cd #dir# &amp;&amp; #dir#\ChocoController.exe -install no -packages &quot;#packages#&quot;" />
                    <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
                    <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
                  </Statement>
                </Then>
              </If>
              <If description="">
                <Condition name="CheckVariable">
                  <Parameter xsi:type="StringParameter" name="VariableName" value="#UpdateOnly#" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="GreaterThan" />
                  <Parameter xsi:type="StringParameter" name="Value" value="1" />
                </Condition>
                <Then>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="An invalid parameter was supplied to the UpdateOnly variable. Please check the Agent Procedure." />
                  </Statement>
                </Then>
              </If>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\ChocoController-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="GetFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#dir#\ChocoController-log.txt" />
                    <Parameter xsi:type="StringParameter" name="KServerFileName" value="LatestInstallLog.txt" />
                    <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                  </Statement>
                  <Statement name="GetVariable" continueOnFail="false">
                    <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                    <Parameter xsi:type="StringParameter" name="SourceContent" value="#dir#\ChocoController-log.txt" />
                    <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#log#" />
                  </Statement>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                      <Parameter xsi:type="StringParameter" name="Value" value="operation completed successfully" />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="Installation Completed Successfully" />
                      </Statement>
                    </Then>
                    <Else>
                      <If description="">
                        <Condition name="CheckVariable">
                          <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                          <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
                          <Parameter xsi:type="StringParameter" name="Value" value="ERROR" />
                        </Condition>
                        <Then>
                          <Statement name="WriteScriptLogEntry" continueOnFail="false">
                            <Parameter xsi:type="StringParameter" name="Comment" value="An Error Occurred. See log file for details." />
                          </Statement>
                        </Then>
                      </If>
                    </Else>
                  </If>
                </Then>
                <Else>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="No Logs found. Maybe ChocoController did not run?" />
                  </Statement>
                </Else>
              </If>
            </Body>
          </Procedure>
        </Folder>
      </Folder>
      <Folder name="Windows" treePres="3">
        <Folder name="Windows 10 Upgrade 22H2" treePres="3">
          <Procedure name="Disable First Logon Animation in Windows 10" treePres="3" id="16872095" folderId="575324811728356" treeFullPath="PVAL Stack.Tool Set - Global.Windows.Windows 10 Upgrade 22H2">
            <Body description="">
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\EnableFirstLogonAnimation" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="RegPath" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="0" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="RegValue" />
              </Statement>
              <If description="">
                <Condition name="Windows 32 or 64 Bit Check">
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                </Condition>
                <Then>
                  <Statement name="SetRegistryValue64" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RegistryPath" value="#RegPath#" />
                    <Parameter xsi:type="StringParameter" name="Value" value="#RegValue#" />
                    <Parameter xsi:type="EnumParameter" name="DataType" value="Integer" />
                  </Statement>
                </Then>
                <Else>
                  <Statement name="SetRegistryValue" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RegistryPath" value="#RegPath#" />
                    <Parameter xsi:type="StringParameter" name="Value" value="#RegValue#" />
                    <Parameter xsi:type="EnumParameter" name="DataType" value="Integer" />
                  </Statement>
                </Else>
              </If>
              <If description="">
                <Condition name="CheckRegistryValue">
                  <Parameter xsi:type="StringParameter" name="RegistryPath" value="#RegPath#" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="The registry value #RegPath# has been created." />
                  </Statement>
                </Then>
                <Else>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="The registry could not be created." />
                  </Statement>
                </Else>
              </If>
            </Body>
          </Procedure>
          <Procedure name="Windows 10 Upgrade - 22H2 (Using Assistant)" treePres="3" id="967576413" folderId="575324811728356" treeFullPath="PVAL Stack.Tool Set - Global.Windows.Windows 10 Upgrade 22H2">
            <Body description="">
              <Statement name="WriteScriptLogEntry" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Comment" value="The Windows 10 Build upgrade progress is currently in the holding process and we are working on the 22H2 upgrade." />
              </Statement>
            </Body>
          </Procedure>
          <Procedure name="Windows 10 Upgrade Results" treePres="3" id="1550829868" folderId="575324811728356" treeFullPath="PVAL Stack.Tool Set - Global.Windows.Windows 10 Upgrade 22H2">
            <Body description="">
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="MachineGroupID" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="MAC" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="AgentTempDirectory" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
              </Statement>
              <Statement name="WriteFile" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Error.ps1" />
                <Parameter xsi:type="StringParameter" name="ManagedFile" value="VSASharedFiles\PVAL\Error.ps1" />
                <Parameter xsi:type="BooleanParameter" name="DeleteAfter" value="False" />
              </Statement>
              <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="powershell.exe -ExecutionPolicy Bypass -Command &quot;&amp; #dir#\Error.ps1&quot;" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
              </Statement>
              <Statement name="WriteScriptLogEntry" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Comment" value="#global:cmdresults#" />
              </Statement>
              <Statement name="UpdateSystemInfo" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Windows 10 Build Results" />
                <Parameter xsi:type="StringParameter" name="Value" value="#global:cmdresults#" />
              </Statement>
            </Body>
          </Procedure>
          <Procedure name="Windows Upgrade Cleanup" treePres="3" id="1012188734" folderId="575324811728356" treeFullPath="PVAL Stack.Tool Set - Global.Windows.Windows 10 Upgrade 22H2">
            <Body description="">
              <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="powershell.exe &quot;Remove-Item -Path '#vAgentConfiguration.agentTempDir#\Win10' -Recurse -Force -verbose&quot;" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
              </Statement>
              <Statement name="WriteScriptLogEntry" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Comment" value="#global:cmdresults#" />
              </Statement>
              <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="rmdir /Q /S &quot;#vAgentConfiguration.agentTempDir#\Win10&quot;" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
              </Statement>
              <Statement name="WriteScriptLogEntry" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Comment" value="#global:cmdresults#" />
              </Statement>
            </Body>
          </Procedure>
        </Folder>
        <Folder name="Windows Feature Upgrades" treePres="3">
          <Procedure name="Registry Check" treePres="3" id="2022628088" folderId="241439866899252" treeFullPath="PVAL Stack.Tool Set - Global.Windows.Windows Feature Upgrades">
            <Body description="">
              <If description="">
                <Condition name="CheckRegistryValue64">
                  <Parameter xsi:type="StringParameter" name="RegistryPath" value="HKEY_LOCAL_MACHINE\SOFTWARE\_automation\WindowsUpdate\InstallationDate" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="GetVariable" continueOnFail="false">
                    <Parameter xsi:type="EnumParameter" name="VariableType" value="RegistryValue64" />
                    <Parameter xsi:type="StringParameter" name="SourceContent" value="HKEY_LOCAL_MACHINE\SOFTWARE\_automation\WindowsUpdate\InstallationState" />
                    <Parameter xsi:type="StringParameter" name="VariableName" value="installState" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="Feature Upgrade Install State: #installState#" />
                  </Statement>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="installState" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="Equals" />
                      <Parameter xsi:type="StringParameter" name="Value" value="0" />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="Feature Upgrade has never run on this endpoint." />
                      </Statement>
                      <Statement name="UpdateSystemInfo" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Windows Feature Upgrade Status" />
                        <Parameter xsi:type="StringParameter" name="Value" value="Never Run" />
                      </Statement>
                    </Then>
                  </If>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="installState" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="Equals" />
                      <Parameter xsi:type="StringParameter" name="Value" value="2" />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="Feature Upgrade failed on this endpoint" />
                      </Statement>
                      <Statement name="UpdateSystemInfo" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Windows Feature Upgrade Status" />
                        <Parameter xsi:type="StringParameter" name="Value" value="Failure" />
                      </Statement>
                    </Then>
                  </If>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="installState" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="Equals" />
                      <Parameter xsi:type="StringParameter" name="Value" value="3" />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="The latest Feature Upgrade was successful on this endpoint" />
                      </Statement>
                      <Statement name="UpdateSystemInfo" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Windows Feature Upgrade Status" />
                        <Parameter xsi:type="StringParameter" name="Value" value="Success" />
                      </Statement>
                      <Statement name="ExecuteScript" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="ScriptID" value="" />
                        <Parameter xsi:type="StringParameter" name="ScriptName" value="" />
                        <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
                        <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
                      </Statement>
                    </Then>
                  </If>
                  <If description="">
                    <Condition name="CheckVariable">
                      <Parameter xsi:type="StringParameter" name="VariableName" value="installState" />
                      <Parameter xsi:type="EnumParameter" name="Condition" value="Equals" />
                      <Parameter xsi:type="StringParameter" name="Value" value="1" />
                    </Condition>
                    <Then>
                      <Statement name="WriteScriptLogEntry" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="Comment" value="Feature Upgrade still in progress." />
                      </Statement>
                      <Statement name="ExecuteScript" continueOnFail="false">
                        <Parameter xsi:type="StringParameter" name="ScriptID" value="2022628088" />
                        <Parameter xsi:type="StringParameter" name="ScriptName" value="Registry Check" />
                        <Parameter xsi:type="StringParameter" name="TimeDelay" value="1" />
                        <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Hours" />
                      </Statement>
                    </Then>
                  </If>
                </Then>
                <Else>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="Feature Upgrade still in progress." />
                  </Statement>
                  <Statement name="ExecuteScript" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="ScriptID" value="2022628088" />
                    <Parameter xsi:type="StringParameter" name="ScriptName" value="Registry Check" />
                    <Parameter xsi:type="StringParameter" name="TimeDelay" value="1" />
                    <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Hours" />
                  </Statement>
                </Else>
              </If>
            </Body>
          </Procedure>
          <Procedure name="Windows 10 Feature Upgrade" treePres="3" id="1469973266" folderId="241439866899252" treeFullPath="PVAL Stack.Tool Set - Global.Windows.Windows Feature Upgrades">
            <Body description="">
              <Statement name="UpdateSystemInfo" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Windows Feature Upgrade Status" />
                <Parameter xsi:type="StringParameter" name="Value" value="Initiated" />
              </Statement>
              <Statement name="Execute Powershell" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -Type Directory -Path $env:ProgramData\_automation\AgentProcedure -name UpdateWindows10" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\AgentProcedure\UpdateWindows10" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="directory" />
              </Statement>
              <Statement name="GetURL" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Update-Windows10.ps1" />
                <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#directory#\Update-Windows10.ps1" />
                <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
              </Statement>
              <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="Start-Job -ScriptBlock { C:\ProgramData\_automation\AgentProcedure\UpdateWindows10\Update-Windows10.ps1 -Reboot Auto}" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
              </Statement>
              <Statement name="WriteScriptLogEntry" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Comment" value="Raw PS1 Data: #global:psresult#" />
              </Statement>
              <Statement name="UpdateSystemInfo" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Windows Feature Upgrade Status" />
                <Parameter xsi:type="StringParameter" name="Value" value="Upgrade in Progress" />
              </Statement>
              <Statement name="ExecuteScript" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="ScriptID" value="2022628088" />
                <Parameter xsi:type="StringParameter" name="ScriptName" value="Registry Check" />
                <Parameter xsi:type="StringParameter" name="TimeDelay" value="1" />
                <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Hours" />
              </Statement>
              <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="gc  &quot;C:\Windows10Upgrade\upgrader_default.log&quot; | findstr &quot;'Exit state: I'&quot; | select -First 2 | select -last 1" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
              </Statement>
              <Statement name="UpdateSystemInfo" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Windows 10 Build Result" />
                <Parameter xsi:type="StringParameter" name="Value" value="#global:PSResult#" />
              </Statement>
            </Body>
          </Procedure>
          <Procedure name="Windows 10 Feature Upgrade (No Reboot)" treePres="3" id="1081249704" folderId="241439866899252" treeFullPath="PVAL Stack.Tool Set - Global.Windows.Windows Feature Upgrades">
            <Body description="">
              <Statement name="Execute Powershell" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -Type Directory -Path $env:ProgramData\_automation\AgentProcedure -name UpdateWindows10" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\AgentProcedure\UpdateWindows10" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="directory" />
              </Statement>
              <Statement name="GetURL" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Update-Windows10.ps1" />
                <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#directory#\Update-Windows10.ps1" />
                <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
              </Statement>
              <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="Start-Job -ScriptBlock { C:\ProgramData\_automation\AgentProcedure\UpdateWindows10\Update-Windows10.ps1 -Reboot None}" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
              </Statement>
              <Statement name="WriteScriptLogEntry" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Comment" value="Raw PS1 Data: #global:psresult#" />
              </Statement>
              <Statement name="UpdateSystemInfo" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="ColumnName" value="xPVAL Windows Feature Upgrade Status" />
                <Parameter xsi:type="StringParameter" name="Value" value="Reboot Pending" />
              </Statement>
            </Body>
          </Procedure>
        </Folder>
        <Procedure name="Windows 11 block upgrade (lock to Win10 21H2)" treePres="3" id="1916637392" folderId="452330377629184" treeFullPath="PVAL Stack.Tool Set - Global.Windows">
          <Body description="Script Name:  Windows 11 block upgrade (lock to Win10 21H2)&#xA;Script Desc: Script sets registry keys to lock Windows 10 machine to a target build of 21H2.">
            <If description="">
              <Condition name="Windows 32 or 64 Bit Check">
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
              </Condition>
              <Then>
                <Statement name="SetRegistryValue64" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="RegistryPath" value="HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\TargetReleaseVersion" />
                  <Parameter xsi:type="StringParameter" name="Value" value="1" />
                  <Parameter xsi:type="EnumParameter" name="DataType" value="Integer" />
                </Statement>
                <Statement name="SetRegistryValue64" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="RegistryPath" value="HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\ProductVersion" />
                  <Parameter xsi:type="StringParameter" name="Value" value="Windows 10" />
                  <Parameter xsi:type="EnumParameter" name="DataType" value="String" />
                </Statement>
                <Statement name="SetRegistryValue64" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="RegistryPath" value="HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\TargetReleaseVersionInfo" />
                  <Parameter xsi:type="StringParameter" name="Value" value="22H2" />
                  <Parameter xsi:type="EnumParameter" name="DataType" value="String" />
                </Statement>
              </Then>
              <Else>
                <Statement name="SetRegistryValue" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="RegistryPath" value="HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\TargetReleaseVersion" />
                  <Parameter xsi:type="StringParameter" name="Value" value="1" />
                  <Parameter xsi:type="EnumParameter" name="DataType" value="Integer" />
                </Statement>
                <Statement name="SetRegistryValue" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="RegistryPath" value="HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\ProductVersion" />
                  <Parameter xsi:type="StringParameter" name="Value" value="Windows 10" />
                  <Parameter xsi:type="EnumParameter" name="DataType" value="String" />
                </Statement>
                <Statement name="SetRegistryValue" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="RegistryPath" value="HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\TargetReleaseVersionInfo" />
                  <Parameter xsi:type="StringParameter" name="Value" value="22H2" />
                  <Parameter xsi:type="EnumParameter" name="DataType" value="String" />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
      </Folder>
    </Folder>
    <Folder name="VSA Automation" treePres="3">
      <Folder name="API" treePres="3">
        <Folder name="Monitoring" treePres="3">
          <Procedure name="Monitoring Exclusion - Set Agent" treePres="3" id="1493481000" folderId="206316894714868" treeFullPath="PVAL Stack.VSA Automation.API.Monitoring">
            <Body description="Sets the 'xPVAL Exclude From Monitoring' Machine Custom Field value to &quot;Yes&quot; for the specified Agent.">
              <Statement description="Exclude specified agent from Monitoring&#xD;&#xA;The procedure will prompt for an agent name on run to exclude.&#xD;&#xA;No modification of this procedure is necessary for functionality." name="Execute Powershell" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -ItemType Directory -Path %ProgramData%\_automation\ -Name StackContent -ErrorAction SilentlyContinue" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\StackContent" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="DeleteFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  </Statement>
                </Then>
              </If>
              <Statement name="GetURL" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#dir#\Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="Prompt" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="Agent Name" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="agent" />
              </Statement>
              <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="#dir#\Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="&lt;VSA_API_ARGS&gt; -Exclude -AgentName #agent#" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="GetFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                    <Parameter xsi:type="StringParameter" name="KServerFileName" value="/StackLogs/ManagedMonitoring.txt" />
                    <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                  </Statement>
                  <Statement name="GetVariable" continueOnFail="false">
                    <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                    <Parameter xsi:type="StringParameter" name="SourceContent" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                    <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#log#" />
                  </Statement>
                </Then>
                <Else>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#global:psresult#" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="Failed to set the Managed Monitoring CFs. Please Contact support@provaltech.com for assistance." />
                  </Statement>
                </Else>
              </If>
            </Body>
          </Procedure>
          <Procedure name="Monitoring Exclusion - Set ALL" treePres="3" id="266449271" folderId="206316894714868" treeFullPath="PVAL Stack.VSA Automation.API.Monitoring">
            <Body description="Sets the 'xPVAL Exclude From Monitoring' Machine Custom Field value to &quot;Yes&quot; for ALL agents in the VSA.&#xA;Typically not used. Only applicable when a client specifically requests monitoring be disabled for the entire environment.">
              <Statement description="Exclude ALL agents from Monitoring&#xD;&#xA;No modification of this procedure is necessary for functionality." name="Execute Powershell" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -ItemType Directory -Path %ProgramData%\_automation\ -Name StackContent -ErrorAction SilentlyContinue" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\StackContent" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="DeleteFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  </Statement>
                </Then>
              </If>
              <Statement name="GetURL" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#dir#\Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
              </Statement>
              <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="#dir#\Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="&lt;VSA_API_ARGS&gt; -ExcludeAll" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="GetFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                    <Parameter xsi:type="StringParameter" name="KServerFileName" value="/StackLogs/ManagedMonitoring.txt" />
                    <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                  </Statement>
                  <Statement name="GetVariable" continueOnFail="false">
                    <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                    <Parameter xsi:type="StringParameter" name="SourceContent" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                    <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#log#" />
                  </Statement>
                </Then>
                <Else>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#global:psresult#" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="Failed to set the Managed Monitoring CFs. Please Contact support@provaltech.com for assistance." />
                  </Statement>
                </Else>
              </If>
            </Body>
          </Procedure>
          <Procedure name="Monitoring Exclusion - Set Group" treePres="3" id="64996590" folderId="206316894714868" treeFullPath="PVAL Stack.VSA Automation.API.Monitoring">
            <Body description="Sets the 'xPVAL Exclude From Monitoring' Machine Custom Field value to &quot;Yes&quot; for all agents in the Specified Machine Group.&#xA;&#xA;Typically used when a client requests that monitoring is disabled for all agents in, for example, a staging group.">
              <Statement description="Exclude all agents in a specified Machine Group from Monitoring&#xD;&#xA;The procedure will prompt for a Machine Group to exclude on run.&#xD;&#xA;No modification of this procedure is necessary for functionality." name="Execute Powershell" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -ItemType Directory -Path %ProgramData%\_automation\ -Name StackContent -ErrorAction SilentlyContinue" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\StackContent" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="DeleteFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  </Statement>
                </Then>
              </If>
              <Statement name="GetURL" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#dir#\Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="Prompt" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="Group Name" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="group" />
              </Statement>
              <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="#dir#\Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="&lt;VSA_API_ARGS&gt; -Exclude -GroupName #group#" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="GetFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                    <Parameter xsi:type="StringParameter" name="KServerFileName" value="/StackLogs/ManagedMonitoring.txt" />
                    <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                  </Statement>
                  <Statement name="GetVariable" continueOnFail="false">
                    <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                    <Parameter xsi:type="StringParameter" name="SourceContent" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                    <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#log#" />
                  </Statement>
                </Then>
                <Else>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#global:psresult#" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="Failed to set the Managed Monitoring CFs. Please Contact support@provaltech.com for assistance." />
                  </Statement>
                </Else>
              </If>
            </Body>
          </Procedure>
          <Procedure name="Monitoring Exclusion - Set Org" treePres="3" id="446797364" folderId="206316894714868" treeFullPath="PVAL Stack.VSA Automation.API.Monitoring">
            <Body description="Sets the 'xPVAL Exclude From Monitoring' Machine Custom Field value to &quot;Yes&quot; for ALL agents in the Specified Organization.&#xA;Typically not used.">
              <Statement description="Exclude all agents in the specified organization from Monitoring&#xD;&#xA;The procedure will prompt for an organization on run to exclude.&#xD;&#xA;No modification of this procedure is necessary for functionality." name="Execute Powershell" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -ItemType Directory -Path %ProgramData%\_automation\ -Name StackContent -ErrorAction SilentlyContinue" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\StackContent" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="DeleteFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  </Statement>
                </Then>
              </If>
              <Statement name="GetURL" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#dir#\Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="Prompt" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="Organization Name" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="org" />
              </Statement>
              <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="#dir#\Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="&lt;VSA_API_ARGS&gt; -Exclude -OrgName #org#" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="GetFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                    <Parameter xsi:type="StringParameter" name="KServerFileName" value="/StackLogs/ManagedMonitoring.txt" />
                    <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                  </Statement>
                  <Statement name="GetVariable" continueOnFail="false">
                    <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                    <Parameter xsi:type="StringParameter" name="SourceContent" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                    <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#log#" />
                  </Statement>
                </Then>
                <Else>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#global:psresult#" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="Failed to set the Managed Monitoring CFs. Please Contact support@provaltech.com for assistance." />
                  </Statement>
                </Else>
              </If>
            </Body>
          </Procedure>
          <Procedure name="Monitoring Exclusion Override - Set Agent" treePres="3" id="1203139901" folderId="206316894714868" treeFullPath="PVAL Stack.VSA Automation.API.Monitoring">
            <Body description="Sets the 'xPVAL Exclude From Monitoring' Machine Custom Field value to &quot;No&quot; for the specified Agent, enabling monitoring on the endpoint.">
              <Statement description="Enable Monitoring on a specified agent.&#xD;&#xA;The procedure will prompt for an agent name on run to include.&#xD;&#xA;No modification of this procedure is necessary for functionality." name="Execute Powershell" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -ItemType Directory -Path %ProgramData%\_automation\ -Name StackContent -ErrorAction SilentlyContinue" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\StackContent" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="DeleteFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  </Statement>
                </Then>
              </If>
              <Statement name="GetURL" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#dir#\Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="Prompt" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="Agent Name" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="agent" />
              </Statement>
              <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="#dir#\Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="&lt;VSA_API_ARGS&gt; -Include -AgentName #agent#" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="GetFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                    <Parameter xsi:type="StringParameter" name="KServerFileName" value="/StackLogs/ManagedMonitoring.txt" />
                    <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                  </Statement>
                  <Statement name="GetVariable" continueOnFail="false">
                    <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                    <Parameter xsi:type="StringParameter" name="SourceContent" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                    <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#log#" />
                  </Statement>
                </Then>
                <Else>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#global:psresult#" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="Failed to set the Managed Monitoring CFs. Please Contact support@provaltech.com for assistance." />
                  </Statement>
                </Else>
              </If>
            </Body>
          </Procedure>
          <Procedure name="Monitoring Exclusion Override - Set ALL" treePres="3" id="1053390441" folderId="206316894714868" treeFullPath="PVAL Stack.VSA Automation.API.Monitoring">
            <Body description="Sets the 'xPVAL Exclude From Monitoring' Machine Custom Field value to &quot;No&quot; for ALL agents in the VSA, enabling monitoring on the endpoint.&#xA;Typically used during Onboarding.">
              <Statement description="Enable Monitoring on ALL agents in the VSA.&#xD;&#xA;No modification of this procedure is necessary for functionality." name="Execute Powershell" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -ItemType Directory -Path %ProgramData%\_automation\ -Name StackContent -ErrorAction SilentlyContinue" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\StackContent" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="DeleteFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  </Statement>
                </Then>
              </If>
              <Statement name="GetURL" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#dir#\Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
              </Statement>
              <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="#dir#\Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="&lt;VSA_API_ARGS&gt; -IncludeAll" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="GetFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                    <Parameter xsi:type="StringParameter" name="KServerFileName" value="/StackLogs/ManagedMonitoring.txt" />
                    <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                  </Statement>
                  <Statement name="GetVariable" continueOnFail="false">
                    <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                    <Parameter xsi:type="StringParameter" name="SourceContent" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                    <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#log#" />
                  </Statement>
                </Then>
                <Else>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#global:psresult#" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="Failed to set the Managed Monitoring CFs. Please Contact support@provaltech.com for assistance." />
                  </Statement>
                </Else>
              </If>
            </Body>
          </Procedure>
          <Procedure name="Monitoring Exclusion Override - Set Group" treePres="3" id="620054558" folderId="206316894714868" treeFullPath="PVAL Stack.VSA Automation.API.Monitoring">
            <Body description="Sets the 'xPVAL Exclude From Monitoring' Machine Custom Field value to &quot;No&quot; for ALL agents in the specified Machine Group, enabling monitoring on the endpoint.&#xA;">
              <Statement description="Enable Monitoring on all agents in the specified Machine Group&#xD;&#xA;The procedure will prompt for a machine group name on run to include.&#xD;&#xA;No modification of this procedure is necessary for functionality." name="Execute Powershell" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -ItemType Directory -Path %ProgramData%\_automation\ -Name StackContent -ErrorAction SilentlyContinue" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\StackContent" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="DeleteFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  </Statement>
                </Then>
              </If>
              <Statement name="GetURL" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#dir#\Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="Prompt" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="Group Name" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="group" />
              </Statement>
              <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="#dir#\Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="&lt;VSA_API_ARGS&gt; -Include -GroupName #group#" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="GetFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                    <Parameter xsi:type="StringParameter" name="KServerFileName" value="/StackLogs/ManagedMonitoring.txt" />
                    <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                  </Statement>
                  <Statement name="GetVariable" continueOnFail="false">
                    <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                    <Parameter xsi:type="StringParameter" name="SourceContent" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                    <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#log#" />
                  </Statement>
                </Then>
                <Else>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#global:psresult#" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="Failed to set the Managed Monitoring CFs. Please Contact support@provaltech.com for assistance." />
                  </Statement>
                </Else>
              </If>
            </Body>
          </Procedure>
          <Procedure name="Monitoring Exclusion Override - Set Org" treePres="3" id="889459181" folderId="206316894714868" treeFullPath="PVAL Stack.VSA Automation.API.Monitoring">
            <Body description="Sets the 'xPVAL Exclude From Monitoring' Machine Custom Field value to &quot;No&quot; for ALL agents in the specified Organization, enabling monitoring on the endpoint.&#xA;">
              <Statement description="Enable Monitoring on all agents in the specified Org&#xD;&#xA;The procedure will prompt for an organization on run to include.&#xD;&#xA;No modification of this procedure is necessary for functionality." name="Execute Powershell" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -ItemType Directory -Path %ProgramData%\_automation\ -Name StackContent -ErrorAction SilentlyContinue" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\StackContent" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="DeleteFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  </Statement>
                </Then>
              </If>
              <Statement name="GetURL" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#dir#\Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="Prompt" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="Organization Name" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="org" />
              </Statement>
              <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Parameter1" value="#dir#\Update-VsaMonitoringFields.ps1" />
                <Parameter xsi:type="StringParameter" name="Parameter2" value="&lt;VSA_API_ARGS&gt; -Include -OrgName #org#" />
                <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
              </Statement>
              <If description="">
                <Condition name="TestFile">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  <Parameter xsi:type="StringParameter" name="Value" value="" />
                </Condition>
                <Then>
                  <Statement name="GetFile" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                    <Parameter xsi:type="StringParameter" name="KServerFileName" value="/StackLogs/ManagedMonitoring.txt" />
                    <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                  </Statement>
                  <Statement name="GetVariable" continueOnFail="false">
                    <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                    <Parameter xsi:type="StringParameter" name="SourceContent" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                    <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#log#" />
                  </Statement>
                </Then>
                <Else>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="#global:psresult#" />
                  </Statement>
                  <Statement name="WriteScriptLogEntry" continueOnFail="false">
                    <Parameter xsi:type="StringParameter" name="Comment" value="Failed to set the Managed Monitoring CFs. Please Contact support@provaltech.com for assistance." />
                  </Statement>
                </Else>
              </If>
            </Body>
          </Procedure>
        </Folder>
        <Procedure name="Api Auth Reset" treePres="3" id="926980602" folderId="594409892705465" treeFullPath="PVAL Stack.VSA Automation.API">
          <Body description="">
            <Statement name="Execute Powershell" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -ItemType Directory -Path %ProgramData%\_automation\ -Name StackContent -ErrorAction SilentlyContinue" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\StackContent" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaAuthReset-log.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaAuthReset-log.txt" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Update-VsaAuthReset.ps1" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#dir#\Update-VsaAuthReset.ps1" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="#dir#\Update-VsaAuthReset.ps1" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaAuthReset-log.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#dir#\Update-VsaAuthReset-log.txt" />
                  <Parameter xsi:type="StringParameter" name="KServerFileName" value="/StackLogs/AuthReset.txt" />
                  <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                </Statement>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#dir#\Update-VsaAuthReset-log.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="#log#" />
                </Statement>
              </Then>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Managed Monitoring CF Update" treePres="3" id="1144682004" folderId="594409892705465" treeFullPath="PVAL Stack.VSA Automation.API">
          <Body description="Sets the value of the xPVAL Monitoring Managed Machine Custom Field to Yes or No based on the contents of the parent Organization's 'Monitoring' Org Custom Field.">
            <Statement description="Set xPVAL Monitoring Managed value on all Endpoints&#xD;&#xA;Uses the Stack Script Update-VsaMonitoringFields.ps1 from the ProVal Repository, which uses the ProVal VSAAPI Powershell Module to perform the necessary calls.&#xD;&#xA;No Modification is necessary for functionality." name="ExecuteScript" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="ScriptID" value="926980602" />
              <Parameter xsi:type="StringParameter" name="ScriptName" value="Api Auth Reset" />
              <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
              <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
            </Statement>
            <Statement name="Execute Powershell" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -ItemType Directory -Path %ProgramData%\_automation\ -Name StackContent -ErrorAction SilentlyContinue" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\StackContent" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Update-VsaMonitoringFields.ps1" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#dir#\Update-VsaMonitoringFields.ps1" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="#dir#\Update-VsaMonitoringFields.ps1" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="&lt;VSA_API_ARGS&gt; -SetManagedValues" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="StringParameter" name="KServerFileName" value="/StackLogs/ManagedMonitoring.txt" />
                  <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                </Statement>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#dir#\Update-VsaMonitoringFields-log.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="#log#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="#global:psresult#" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="Failed to set the Managed Monitoring CFs. Please Contact support@provaltech.com for assistance." />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Org CF to Machine CF Copy" treePres="3" id="800570763" folderId="594409892705465" treeFullPath="PVAL Stack.VSA Automation.API">
          <Body description="Copies data in a supplied Organizational Custom Field to a target Machine custom field on an agent.&#xA;Can target Organizations, Machine Groups, or individual Agents.">
            <Statement description="Copy Organizational CF data to a related Machine CF&#xD;&#xA;Uses the Stack Script Copy-VsaOrgToMachineCF.ps1 from the ProVal Repository, which uses the ProVal VSAAPI Powershell Module to perform the necessary calls.&#xD;&#xA;The Procedure will prompt for the Organization Field to copy from and a Target Machine CF to copy to. If this field does not exist it will be created.&#xD;&#xA;Modify the arguments provided to the executePowershellCommand64BitSystem() function on line 16 to change how this procedure functions. One of the following MUST be provided.&#xD;&#xA;//Use -AgentName to select a specific agent. This is how the command is set by default.&#xD;&#xA;//Use -Groupname to copy the org field to the entire group's agents&#xD;&#xA;//Use -OrgName to copy the org field to every agent in that org, Similar to the Monitoring field stack solution.&#xD;&#xA;Example Args: &lt;VSA_API_ARGS&gt; -OrgField #orgField# -MachineField #machineField# -GroupName development.Proval" name="ExecuteScript" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="ScriptID" value="926980602" />
              <Parameter xsi:type="StringParameter" name="ScriptName" value="Api Auth Reset" />
              <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
              <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
            </Statement>
            <Statement name="Execute Powershell" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -ItemType Directory -Path %ProgramData%\_automation\ -Name StackContent -ErrorAction SilentlyContinue" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\StackContent" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Copy-VsaOrgToMachineCF-log.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Copy-VsaOrgToMachineCF-log.txt" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Copy-VsaOrgToMachineCF.ps1" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#dir#\Copy-VsaOrgToMachineCF.ps1" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="Prompt" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="Organization Field to Copy" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="orgField" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="Prompt" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="Target Machine Custom Field" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="#machineField" />
            </Statement>
            <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="#dir#\Copy-VsaOrgToMachineCF.ps1" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="&lt;VSA_API_ARGS&gt; -OrgField #orgField# -MachineField #machineField#" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Copy-VsaOrgToMachineCF-log.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#dir#\Copy-VsaOrgToMachineCF-log.txt" />
                  <Parameter xsi:type="StringParameter" name="KServerFileName" value="/StackLogs/CFCopy.txt" />
                  <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                </Statement>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#dir#\Copy-VsaOrgToMachineCF-log.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="#log#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="#global:psresult#" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="Failed to copy CF Content. Please Contact support@provaltech.com for assistance." />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Org Name CF Update" treePres="3" id="831001284" folderId="594409892705465" treeFullPath="PVAL Stack.VSA Automation.API">
          <Body description="Updates the xPVAL Org Name Machine custom field to the long name of the parent organization.">
            <Statement description="Organization Name Custom Field Update&#xD;&#xA;Uses the Stack Script Update-VsaOrgNameCustomField.ps1 from the ProVal Repository, which uses the ProVal VSAAPI Powershell Module to perform the necessary calls.&#xD;&#xA;No modification necessary for functionality" name="ExecuteScript" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="ScriptID" value="926980602" />
              <Parameter xsi:type="StringParameter" name="ScriptName" value="Api Auth Reset" />
              <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
              <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
            </Statement>
            <Statement name="Execute Powershell" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -ItemType Directory -Path %ProgramData%\_automation\ -Name StackContent -ErrorAction SilentlyContinue" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\StackContent" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaOrgNameCustomField-log.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaOrgNameCustomField-log.txt" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Update-VsaOrgNameCustomField.ps1" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#dir#\Update-VsaOrgNameCustomField.ps1" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="#dir#\Update-VsaOrgNameCustomField.ps1" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="&lt;VSA_API_ARGS&gt;" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaOrgNameCustomField-log.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#dir#\Update-VsaOrgNameCustomField-log.txt" />
                  <Parameter xsi:type="StringParameter" name="KServerFileName" value="/StackLogs/OrgNames.txt" />
                  <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                </Statement>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#dir#\Update-VsaOrgNameCustomField-log.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="#log#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="#global:psresult#" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="Failed to set Organization Name CFs. Please Contact support@provaltech.com for assistance." />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="OS Build CF Update" treePres="3" id="210394520" folderId="594409892705465" treeFullPath="PVAL Stack.VSA Automation.API">
          <Body description="Updates 'xPVAL OS Build' Machine CF on all agents with the agent's OS Build Number (i.e. 19044)&#xA;This works for all OS types.">
            <Statement description="OS Build CF Update&#xD;&#xA;Uses the Stack Script Update-VsaOsBuildCustomField.ps1 from the ProVal Repository, which uses the ProVal VSAAPI Powershell Module to perform the necessary calls.&#xD;&#xA;No modification of the command parameters is necessary for functionality." name="ExecuteScript" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="ScriptID" value="926980602" />
              <Parameter xsi:type="StringParameter" name="ScriptName" value="Api Auth Reset" />
              <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
              <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
            </Statement>
            <Statement name="Execute Powershell" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -ItemType Directory -Path %ProgramData%\_automation\ -Name StackContent -ErrorAction SilentlyContinue" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\StackContent" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaOSBuildCustomField-log.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaOSBuildCustomField-log.txt" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Update-VsaOSBuildCustomField.ps1" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#dir#\Update-VsaOSBuildCustomField.ps1" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="#dir#\Update-VsaOSBuildCustomField.ps1" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="&lt;VSA_API_ARGS&gt;" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaOSBuildCustomField-log.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#dir#\Update-VsaOSBuildCustomField-log.txt" />
                  <Parameter xsi:type="StringParameter" name="KServerFileName" value="/StackLogs/OSBuild.txt" />
                  <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                </Statement>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#dir#\Update-VsaOSBuildCustomField-log.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="#log#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="#global:psresult#" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="Failed to set OS Builds. Please Contact support@provaltech.com for assistance." />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Patching Schedule Update" treePres="3" id="1781873715" folderId="594409892705465" treeFullPath="PVAL Stack.VSA Automation.API">
          <Body description="Updates the xPVAL Patching Schedule Machine CF on endpoints based on the ORG CF Data per org.">
            <Statement description="Patching Schedule Update&#xD;&#xA;Uses the Stack Script Update-PatchingSchedule.ps1 from the ProVal Repository, which uses the ProVal VSAAPI Powershell Module to perform the necessary calls.&#xD;&#xA;No modification is needed to the parameters for any reason." name="ExecuteScript" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="ScriptID" value="926980602" />
              <Parameter xsi:type="StringParameter" name="ScriptName" value="Api Auth Reset" />
              <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
              <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
            </Statement>
            <Statement name="Execute Powershell" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -ItemType Directory -Path %ProgramData%\_automation\ -Name StackContent -ErrorAction SilentlyContinue" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\StackContent" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaPatchingSchedule-log.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaPatchingSchedule-log.txt" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Update-VSAPatchingSchedule.ps1" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#dir#\Update-VsaPatchingSchedule.ps1" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="#dir#\Update-VsaPatchingSchedule.ps1" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="&lt;VSA_API_ARGS&gt;" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Update-VsaPatchingSchedule-log.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#dir#\Update-VsaPatchingSchedule-log.txt" />
                  <Parameter xsi:type="StringParameter" name="KServerFileName" value="/StackLogs/Patching.txt" />
                  <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                </Statement>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#dir#\Update-VsaPatchingSchedule-log.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="#log#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="#global:psresult#" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="Failed to set Patching Schedules. Please Contact support@provaltech.com for assistance." />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
        <Procedure name="Stagnant Agent Removal" treePres="3" id="1161266950" folderId="594409892705465" treeFullPath="PVAL Stack.VSA Automation.API">
          <Body description="Deletes agents in the VSA that have been offline for -OfflineDays days. Can optionally exclude one or more Machine Groups from removal.">
            <Statement description="Remove Stagnant Agents&#xD;&#xA;Uses the Stack Script Remove-StagnantAgents.ps1 from the ProVal Repository, which uses the ProVal VSAAPI Powershell Module to perform the necessary calls.&#xD;&#xA;Modify the arguments provided to the executePowershellCommand64BitSystem() function on line 13 to change how this procedure functions:&#xD;&#xA; //     -OfflineDays: set this to the number of days the Agent should be offline before removal. If this is not provided, a default value of 60 is assumed.&#xD;&#xA;// -MachineGroupException: add a comma seperated list of machine groups to exclude from agent removal.&#xD;&#xA;// Argument Example: &lt;VSA_API_ARGS&gt; -OfflineDays 30 -MachineGroupException 'development.proval','servers.proval'" name="ExecuteScript" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="ScriptID" value="926980602" />
              <Parameter xsi:type="StringParameter" name="ScriptName" value="Api Auth Reset" />
              <Parameter xsi:type="StringParameter" name="TimeDelay" value="" />
              <Parameter xsi:type="EnumParameter" name="TimeUnit" value="Immediate" />
            </Statement>
            <Statement name="Execute Powershell" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="New-Item -ItemType Directory -Path %ProgramData%\_automation\ -Name StackContent -ErrorAction SilentlyContinue" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="False" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="%ProgramData%\_automation\StackContent" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="dir" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Remove-VsaStagnantAgent-log.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Remove-VsaStagnantAgent-log.txt" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="https://file.provaltech.com/repo/script/Remove-VsaStagnantAgent.ps1" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#dir#\Remove-VsaStagnantAgent.ps1" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <Statement name="Execute Powershell Command (64-bit, Run As System)" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="#dir#\Remove-VsaStagnantAgent.ps1" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="&lt;VSA_API_ARGS&gt; -OfflineDays 180" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#dir#\Remove-VsaStagnantAgent-log.txt" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="GetFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="RemoteFileName" value="#dir#\Remove-VsaStagnantAgent-log.txt" />
                  <Parameter xsi:type="StringParameter" name="KServerFileName" value="/StackLogs/AgentRemovals.txt" />
                  <Parameter xsi:type="EnumParameter" name="Action" value="OverwriteNoAlert" />
                </Statement>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#dir#\Remove-VsaStagnantAgent-log.txt" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="log" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="#log#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="#global:psresult#" />
                </Statement>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="Failed to Remove Stagnant Agents. Please Contact support@provaltech.com for assistance." />
                </Statement>
              </Else>
            </If>
          </Body>
        </Procedure>
      </Folder>
    </Folder>
  </Folder>
</ScExport>